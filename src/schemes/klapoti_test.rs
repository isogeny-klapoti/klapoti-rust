use crate::quaternion::quadratic_order::{QuadraticOrder, QuadraticOrderEl};
use crate::util::Big;
use crate::{ec117, ec512, ec214, ec509, ec768, util::bytes_from_str};

pub fn params32() {
    // p = 110985345351181940559839359037079551
    let A = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("9827042539290988311061073437476016")),
        &ec117::Fp::decode_reduce(&bytes_from_str("74851534054032925543405982204421719")),
    );
    let EA = ec117::Curve::new(&A);

    let Px = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("94208639506250591239460812981844796")),
        &ec117::Fp::decode_reduce(&bytes_from_str("2778322924810514545629313540375222")),
    );
    let Py = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("52983347914014001368598403803362876")),
        &ec117::Fp::decode_reduce(&bytes_from_str("75608234133947709814825753280898001")),
    );

    let P = ec117::Point {
        X: Px,
        Y: Py,
        Z: ec117::Fq::ONE,
    };

    let Qx = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("90055805557512327802376186357057367")),
        &ec117::Fp::decode_reduce(&bytes_from_str("109750291186252297193749404845454157")),
    );
    let Qy = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("103764053627190847209017305966084403")),
        &ec117::Fp::decode_reduce(&bytes_from_str("93767318089512661131903081470994534")),
    );

    let Q = ec117::Point {
        X: Qx,
        Y: Qy,
        Z: ec117::Fq::ONE,
    };

    let omPx = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("94656396045791334018841745121192250")),
        &ec117::Fp::decode_reduce(&bytes_from_str("38804522927790469747695470125130916")),
    );
    let omPy = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("8616129072200153248015871509769894")),
        &ec117::Fp::decode_reduce(&bytes_from_str("40350091676899444441517261987606172")),
    );

    let omP = ec117::Point {
        X: omPx,
        Y: omPy,
        Z: ec117::Fq::ONE,
    };

    let omQx = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("100870104592719437939350654020286413")),
        &ec117::Fp::decode_reduce(&bytes_from_str("26027362721692591519283159689746739")),
    );
    let omQy = ec117::Fq::new(
        &ec117::Fp::decode_reduce(&bytes_from_str("21326262706705111492955035179548229")),
        &ec117::Fp::decode_reduce(&bytes_from_str("53144258333902684409298433673474719")),
    );

    let omQ = ec117::Point {
        X: omQx,
        Y: omQy,
        Z: ec117::Fq::ONE,
    };

    let gen_denom = 2.big(); // quadratic order is generated by 1 and (1 + theta)/gen_denom.
    let field_disc = -11.big();
    let order_conductor = 19457.big();
    let quadratic_order =
        QuadraticOrder::new(field_disc.clone(), gen_denom, order_conductor.clone());

    // omega = 1/2*ϑ + 115517/2
    let omega = QuadraticOrderEl::new(115517.big(), 1.big(), 2.big(), quadratic_order.clone());
    // beta = 5/2*ϑ + 125787/2
    let beta = QuadraticOrderEl::new(125787.big(), 5.big(), 2.big(), quadratic_order.clone());

    let strategy: [usize; 103] = [
        48, 34, 21, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 14, 13, 8,
        5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 5, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
    ];

    let two_dim = ec117::TwoDim::new(EA, omega, beta, P, Q, omP, omQ);
    let klapoti = ec117::Klapoti::new(quadratic_order, two_dim);

    let ideal = klapoti.secret();

    klapoti.act(ideal, 23, strategy.to_vec());
}

pub fn params64() {
    // p = 13575412597899949847778495756098141666107570891477033872626024447
    let A = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "1292950946049871174637822016068695952313499707811732828713807401",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "11638552349944361160217509745682746247479151631328891592249884628",
        )),
    );
    let EA = ec214::Curve::new(&A);

    let Px = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "11723429863689620707436440690551082646129077314391124572415166271",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "10456954105373228724166853278926964858170087793625218427799646343",
        )),
    );
    let Py = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "6529457113899779665174483378227674168471749366522982109161668651",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "2580221148911431123713889901557542302001805934065736789183452123",
        )),
    );

    let P = ec214::Point {
        X: Px,
        Y: Py,
        Z: ec214::Fq::ONE,
    };

    let Qx = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "4846366763224230479763307074770335580637949267357089588784694136",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "348055148369189936264026829801394744138471925808921710639879097",
        )),
    );
    let Qy = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "9323569297698788639677461583991517933658585230294070071048851679",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "2120762020776291485328773521530233377574257488787697652383584048",
        )),
    );

    let Q = ec214::Point {
        X: Qx,
        Y: Qy,
        Z: ec214::Fq::ONE,
    };

    let omPx = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "1572040473296259226414846237835939480953848406791807972162041759",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "6356558337637600514391792656026347990281988097418702304944537063",
        )),
    );
    let omPy = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "3381572806759006732653322232692346340080480894439656638783798511",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "5466589373957794996471797565399617192968835405114903341674905098",
        )),
    );

    let omP = ec214::Point {
        X: omPx,
        Y: omPy,
        Z: ec214::Fq::ONE,
    };

    let omQx = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "4754960255176951360450680166150696950632914368595055674440383849",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "11858848620189526315546198709763035166381181711595397756753332109",
        )),
    );
    let omQy = ec214::Fq::new(
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "5036852178299358060734894556022325626247115077702207703721822119",
        )),
        &ec214::Fp::decode_reduce(&bytes_from_str(
            "5132960215037716517189288106562229012491006181245242554710577441",
        )),
    );

    let omQ = ec214::Point {
        X: omQx,
        Y: omQy,
        Z: ec214::Fq::ONE,
    };

    let gen_denom = 2.big(); // quadratic order is generated by 1 and (1 + theta)/gen_denom.
    let field_disc = -11.big();
    let order_conductor = 469762049.big();
    let quadratic_order =
        QuadraticOrder::new(field_disc.clone(), gen_denom, order_conductor.clone());

    // omega = 1/2*ϑ + 1721613579/2
    let omega = QuadraticOrderEl::new(1721613579.big(), 1.big(), 2.big(), quadratic_order.clone());
    // beta = 7/2*ϑ + 21586103089/2
    let beta = QuadraticOrderEl::new(
        "21586103089".big(),
        7.big(),
        2.big(),
        quadratic_order.clone(),
    );

    let strategy: [usize; 202] = [
        79, 55, 34, 21, 13, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 24, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 8, 5, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1,
    ];

    let two_dim = ec214::TwoDim::new(EA, omega, beta, P, Q, omP, omQ);
    let klapoti = ec214::Klapoti::new(quadratic_order, two_dim);

    let ideal = klapoti.secret();

    klapoti.act(ideal, 39, strategy.to_vec());
}

pub fn params128() {
    // p = 864175120484581453683482079962486176185193500155369104423588921177379322250834082489183304374038697487834084609675858746433355728113743766078731283595263
    let A = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("269704802029583887647805335061052403712442989875585143749461752225029821224697353454810243133823728633187546990793816614652026169443982629566764071566284")),
        &ec509::Fp::decode_reduce(&bytes_from_str("45075497449298242852915889845996934411298434793363088816673972940092720613863185721527461482928834564164321456798288718942619300938284615603658540248014")),
    );
    let EA = ec509::Curve::new(&A);

    let Px = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("447892616027457465502233967364086561586562335469006266290465208783526124103064492970873055569941134579269272538807316962481005160382570106505154200728466")),
        &ec509::Fp::decode_reduce(&bytes_from_str("800290003970120280572593787002025355019721395023053350491644224698148995048995063007660746234392633217247174162428569404247459867752475229860556965198279")),
    );
    let Py = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("519877388686727466920907141814943949020355617115239136230804736460919812194254261679112307050726660720836135386242885754976273452591631011423917422348771")),
        &ec509::Fp::decode_reduce(&bytes_from_str("605114052319867558932342087059807612022892998737365751462058895252259494372498773096167541799595985840585215351339563198397547806341378416496744576958128")),
    );

    let P = ec509::Point {
        X: Px,
        Y: Py,
        Z: ec509::Fq::ONE,
    };

    let Qx = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("581507943031590973149523346726187302800330615020073945319870413336700595418472576727407722593565186779028791738389643633637621776018448806969800496171665")),
        &ec509::Fp::decode_reduce(&bytes_from_str("296992433797934585469880380198135514547268838524842360635380694206871872211981578239354201968494836926905151653846428203979911117308845627563297064024134")),
    );
    let Qy = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("374104752400509605673980871207570386545470515033643307547656682897791939307273824348912788757046980260910734948072787715087017921252780682160868195437566")),
        &ec509::Fp::decode_reduce(&bytes_from_str("860886762997546709942891187910356315524716017603589228443181778475513536809307767636179123848468273049765258358389766247071465805595180262745557470648470")),
    );

    let Q = ec509::Point {
        X: Qx,
        Y: Qy,
        Z: ec509::Fq::ONE,
    };

    let omPx = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("117364827899177059651277259150474935010104080982836495299275230154414640464707416846531424857872084495923618595737249168026438406721780781232254192922788")),
        &ec509::Fp::decode_reduce(&bytes_from_str("266058077597066160578639552635422053412206620907513149991022030262751902463737172585062035857693236118635861959941433228480542149175344816135702480159034")),
    );
    let omPy = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("8022430588726828947198371836019131893534055152329420428850721991534462381340373664827471203284775511213176889211072082060440921574624796381053426098382")),
        &ec509::Fp::decode_reduce(&bytes_from_str("477238204785152495975270768173116194897686017354839920445991304698415818216147340967616942878422509035329189025930242592810529322598699646141543530614462")),
    );

    let omP = ec509::Point {
        X: omPx,
        Y: omPy,
        Z: ec509::Fq::ONE,
    };

    let omQx = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("147775258981285866966116022022913564135666348961661433361136122574185027907525995802973409019591943944341051945210466497221185165048385369810117399652359")),
        &ec509::Fp::decode_reduce(&bytes_from_str("671827881927573715456912996097344332484172604565595244033691413943714532496526944794528845949791873076149479598009001017843295012167914989801350326034092")),
    );
    let omQy = ec509::Fq::new(
        &ec509::Fp::decode_reduce(&bytes_from_str("211785743333482542693275100259311165267101203331379805521488281141966213608336576673082845918500195026369271217051155063511774708462930773875347293706060")),
        &ec509::Fp::decode_reduce(&bytes_from_str("739118501506265494013422084991999169053986131949904071791478793677466824370959165027768700679545439036962047122800374196734886830129872014981877581011610")),
    );

    let omQ = ec509::Point {
        X: omQx,
        Y: omQy,
        Z: ec509::Fq::ONE,
    };

    let gen_denom = 2.big(); // quadratic order is generated by 1 and (1 + theta)/gen_denom.
    let field_disc = -11.big();
    let order_conductor = 469762049.big();
    let quadratic_order =
        QuadraticOrder::new(field_disc.clone(), gen_denom, order_conductor.clone());

    // omega = 1/2*ϑ + 3011552840461219095/2
    let omega = QuadraticOrderEl::new(
        "3011552840461219095".big(),
        1.big(),
        2.big(),
        quadratic_order.clone(),
    );
    // beta = 5/2*ϑ + 30751779181008197303/2
    let beta = QuadraticOrderEl::new(
        "30751779181008197303".big(),
        5.big(),
        2.big(),
        quadratic_order.clone(),
    );

    let strategy: [usize; 202] = [
        79, 55, 34, 21, 13, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 24, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 8, 5, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1,
    ];

    let two_dim = ec509::TwoDim::new(EA, omega, beta, P, Q, omP, omQ);
    let klapoti = ec509::Klapoti::new(quadratic_order, two_dim);

    let ideal = klapoti.secret();

    klapoti.act(ideal, 36, strategy.to_vec());
}

pub fn params512() {
    // p = 16817108706960936047926250343229286165364990341381367811283310868820935595132760045264173360071734436962452806133974268664148211143175426529145662665005373084634528906709745342408486815448880285004001922067794609774238712489745132120678885224411134478776486050268946668789602410845866513375293532853950407027320322402414997263032829083981504396201531108899159641304979638840839572964949642695548216813886050284686242388986797442666560125246393609960082588564252826133453550579216736673746537938943

    let A = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("4369637819393244575550832609459187443597522774282405652327541866917657512131248674231155040660481865207064812540993772611395305199945139231445709490961277991359392669801446260674383102971817906848319987126127755174854466098502765891873817513152569453065317401772413930864588660646890419686825539218066862447134472985230010512806608563389223158163157664720235094455682475322284181020670863143011268014879899646508666264637453483729535739960417726386752075298992838286965342351059995384614713261227")),
        &ec512::Fp::decode_reduce(&bytes_from_str("0")),
    );
    let EA = ec512::Curve::new(&A);

    let Px = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("6703082789613815583270325005189477696643653721187384713977438747908966286144780703578918838730460760012818903661058676804035302697180290557809674461841773424140575589931922853368601391591219034047977521618661110388230457463956493885147404729621222757723975378627725143976669640690272434112706024800517454689942241435486934588187253688273923650508366353564134358305165929170160886446640375165941048982993593130906885493219101044454902641562357776263819756016896075761741357422860150207224664736835")),
        &ec512::Fp::decode_reduce(&bytes_from_str("7718531934857112587205373396323347454899136156586877137879119797896462917929317892708017624855892671915773808917488933978877188495898711009501326499361448997682077467359435627941247254052661219413105263594884187902590743966886538366643005453254899367848259831204432420846825362222739884771652630175057558430285807958419130562417242139163271509780555713475035917412492574472043471244893770176277692966430264535638833983341397576425823938914796438137750803593235255397566444392999181838677624309567")),
    );
    let Py = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("12751441404422448271731853297878244588734787405593605451927750700907027896742887002870319390111936124401663186136343909607206833755716305097664851985643587102436448518687981779965386974712476675484206436215176461750440693325306963660734568039488567764445251093469330947718998356129396549186568991967038940705772948852981263284429584868641336359716163653649418407804560579333554902285764427954755980055163694908241346023272002626226259481498040260524553696185161436964081174090777135144701053520243")),
        &ec512::Fp::decode_reduce(&bytes_from_str("4652826235823771042776015480414415150520924382913254832464772605859711381588826468344794823805771190071841467341515294952104433177226064602321676833409341510776112881259789655026805587179191708529366844930735982107835386282552206857698031880332003934937103770838512867810558601952240992528047332918250215384782789097130027002975996236399088193816954961112736240737534291895999278690402715404757683520559116046667938056205866085942914343166861576535095132747206427330946720364862228095600611210469")),
    );

    let P = ec512::Point {
        X: Px,
        Y: Py,
        Z: ec512::Fq::ONE,
    };

    let Qx = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("1026230366262289990159826111797370218840631156523750786275620256867800630737910424596952630555363756326467516241268335354123304024204441355933623043389152351287869696541322700130499951783257397981887729281448106323648598447130404406004767297270684243692248016978056978742180751268092759849375525410870868256282310721849492664375348980212940032672878677890989294336313814953518758319067594514058813245471483442089908136972512806973859381999791816406300465856986117589488042954223880066606522303449")),
        &ec512::Fp::decode_reduce(&bytes_from_str("7585172327146647502207825816022706612994025902298236967024616133805304944169460955732052080269707865561557455011588324732573064067982497364389705163871316363237299570342899794244454394514813143017443388375226316016795197805244215703385734388378945542385666543296071603245747898325428927411688242616723252911745880701591065214263075037756224515244219136833442237595010678041652459806063340978779967761157410974099553760602591086067937125990456643008262931123271119792326088865023568349826325643141")),
    );
    let Qy = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("3028345695158716879221351197034565834412090572698360648613931261578811443028280078798606318581791360990878950082542670943280345578075090515308008233561680610351354167450074933873375087584647147574808007492838141157014256010379935165412089108277002806314125642694315782874092555199088640403136744625198587730240277544008007035631175866444791766557298947566028200694709907542615780050926442655692155954908023629843081499088804368500221738673907943145922740991319114726153822734351663545964881446586")),
        &ec512::Fp::decode_reduce(&bytes_from_str("77220238607048372868308446998217603843564475423150680628232325069315372246359901920889055590324666828038129271861706899694894813743479756034261615801746272877258411324627887490018566219944445312773686801896379860265151639969766296609037519538563993072110102176139347736731455088476906490589997011531989228013924576838296581298571237453126966560949006677051271791485026014375021548901314624499756583551223469404629323649574167259927019579100138152216895745358173236811797431683039954916478541389")),
    );

    let Q = ec512::Point {
        X: Qx,
        Y: Qy,
        Z: ec512::Fq::ONE,
    };

    let omPx = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("6397032523264962665969971652506937736558850825064976566650058008643885021215093292914730803503259001640510072167736326545421236188511911531553628486127343195132183520047180360376512570046204977816710061209509278658983703755551342072461765611736041787770878134556931335647653973773114308339246694381406933220499834275817482737384620218953480629210621468212749520639011038314840889601086522635491227024757709573051457393419698515610580493172833727616892253478925511692767957267433974911843533009008")),
        &ec512::Fp::decode_reduce(&bytes_from_str("4106816772570709570091606073989854311493560179211188410266660097487715585040121012481474954012659164025915853331915107358946418102096932088813769450008429024814439162859815108557858850468537111810486571705722245135653296008895571412318878713387161709048146666138213210767170196009550294214699951047734967497562443599853858326214830995115414169386949018458062087245075604897779139559499615139840398685369987159822893255236653089494083412059410827909900299894303841177359598546055765948557870603078")),
    );
    let omPy = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("14183133633097776889225776585866056664963866500148747200720678198937916557005898637276531840586970439232501093837954800956902381684210665119087434599068014295877229097637539360120783038679053762645483144270924661691971226739753145104133964337170297331250553064664244682344236802572706810371197402807421417606023853891787954379850168126483891328644551696519984534369881161785923811915829104989827262148944648463589382796304661766977528886553588061346472555637312904854682093582386557947063478482903")),
        &ec512::Fp::decode_reduce(&bytes_from_str("8784635067377370189874121207659881804426361385337790488393945990100717027407570852516622786396217420919607915595336995648800556880441061348570557532257774584272096712836620490835578952873823318076930603901180885168460293115149819010947962489810077625909801374246794045662212802157613072894564753953167416643351608784485758218644545674773184278979132107921542362810032579785912702838680181300633626981773857517023502594293475742499979086710309050242329887476649613921989043750412180919979599800002")),
    );

    let omP = ec512::Point {
        X: omPx,
        Y: omPy,
        Z: ec512::Fq::ONE,
    };

    let omQx = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("12846286659415633964432468161451619976941658445410702599504759864518419892570097358414923646670773115961427172791844096505437127240645712260576704059526884007708037674893686368213580718582021320143367646430362151198980855444437135569839548573888137840133497421334099104836278953429356083822301012114475836666468366460748371449182728423642221157501777803291294903072536676132769939073321140732658745317387141598956319922582327651547482601541913422088211787518281328230587521015161727796939460157759")),
        &ec512::Fp::decode_reduce(&bytes_from_str("6999884055850998563344711724707602807334334671261974948775426513648822260261667414547207406900388235997445613540604028358386970369718275319124762229107187380639072855080703195834489865195158158342664761849726713299645282778418597444347326674146960407179033989515213649596510390642773998377631082603934619424184544145995158814549881461431229009027380967040925589201901296046535703903886808489072437280509752952121614476443596108374771632441887613418889770963682872054400869800937518329617748886458")),
    );
    let omQy = ec512::Fq::new(
        &ec512::Fp::decode_reduce(&bytes_from_str("270209112202353022390303312533969261460088125941153888360985894101072484812810690915189701470157315799598167227379636571863589398310978478471540493517212594752172578293558540332371806706156410273788340842896634560700676537400962941370549402212510493219255990171892802063883070089256154053687399502132213337029361706014489281953378030780293756690552655685092529485584113947836178254408403644163979695308489053961797180440362209107551623200086138700804235738840699692045943613757299514459593343622")),
        &ec512::Fp::decode_reduce(&bytes_from_str("3119229623615122337556101631670731162789810692110430863549650776910995238016661013209125974214727062679767446475742515321514974986083813492234903397962562505483820975701777273034013395420149415010141544080843987671428144591619928060063800808322318334094186008238240424007944162896049859049143663188433352199272377581760752112531349513023847613739468826114846664537941526840469719665938802693815973478080844431102371200119930301937310060321192065293182625122934740899950712471080632197227468865413")),
    );

    let omQ = ec512::Point {
        X: omQx,
        Y: omQy,
        Z: ec512::Fq::ONE,
    };

    let gen_denom = 2.big(); // quadratic order is generated by 1 and (1 + theta)/gen_denom.
    let field_disc = -11.big();
    let order_conductor =
        "34912628517411597986722280174925946878633333688546875202053332372871337315891".big();
    let quadratic_order =
        QuadraticOrder::new(field_disc.clone(), gen_denom, order_conductor.clone());

    // omega = 1/2*ϑ + 1329069277979427518548494869659323483948956584845223167970401259730478351270907/2
    let omega = QuadraticOrderEl::new(
        "1329069277979427518548494869659323483948956584845223167970401259730478351270907".big(),
        1.big(),
        2.big(),
        quadratic_order.clone(),
    );

    // beta = 27/2*ϑ + 1474947587453319227067450510036589234454539818780937894230669120639397875015835/2
    let beta = QuadraticOrderEl::new(
        "1474947587453319227067450510036589234454539818780937894230669120639397875015835".big(),
        27.big(),
        2.big(),
        quadratic_order.clone(),
    );

    let two_dim = ec512::TwoDim::new(EA, omega, beta, P, Q, omP, omQ);
    let klapoti = ec512::Klapoti::new(quadratic_order, two_dim);

    let ideal = klapoti.secret();

    let strategy: [usize; 1733] = [
        610, 377, 233, 157, 144, 89, 55, 34, 21, 13, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
        3, 2, 1, 1, 1, 1, 1, 55, 34, 21, 13, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
        3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3,
        2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 233,
        144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1,
        13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21,
        13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 55, 34, 21,
        13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
        8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 89, 55, 34, 21, 13, 8, 5, 3, 2,
        1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1,
        1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1,
        1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
    ];

    klapoti.act(ideal, 261, strategy.to_vec());
}

pub fn params768() {
    // p = 33395060558743137027368454504087359109207798725160617707283511909435409148276414135214427465966285561662314837816800054200006473966344546824760846882458741414763678152082195180767233443977438203690887118082735382303478611064238643796768337520264988676353805457677047390442124083254891639725210964530401640226353609392634113421608298739060775799549376538257097147975941782552422655324158490503998562433330513333060308160227118879409222436901396388469091363000938373286542390624603820082512836033410175744145734108210038943519646240873562675299972451964455930804680435508286467772202603186653452703845756781869090891375594328685867683372043241421249159811272512709227633970041273297115634684087786086779604707555779720023522672639 

    let A = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("14342197545082162604071513286026345060794142411035003972290259023209896261777822265226734104178225225649063662822117226302542144521471432200592971811199535655627642115212215853889514556410437295677459484077921769874729067177759880796870996451000291933782439875627541100172758375618715572042086171580511527086580096673711655566709833269856314884263942434614251635766812681744059234847600072600301813058272988715108622829823362941178491120559635376686340105360932451940909551596777455978182474803661747472503503667203763684303827860206819737988683161315017206286023029475053097173119088319598911320853646856218137230817752899868273161559866766214861908203126875036493836283272091243508177821006616219469340569697134185503172091400")),
        &ec768::Fp::decode_reduce(&bytes_from_str("0")),
    );
    let EA = ec768::Curve::new(&A);

    let Px = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("25532019886743610738589898673905613311383959040552338038340925575292077148634073528436226604477729274340222058762606835633260044839043768439875799960223558600302705126976674317749539479918139548535840683349689516790804016581070652913331884681556021544233513253839604602743268594479712808268855658654401608777456629341840317581552627608730868484763550635653967861289266174213832895716082408857781013945580012435701583891564506576598056092962237959818809621699143351347343118207682706821709957687978465024690947480606986337365373787051614579903871357156156704624076307309497760426994757888578417571001539774174498843888552030300012975603632239303995049431842478621134995375587077164343174854964015522087790072435836656163124459363")),
        &ec768::Fp::decode_reduce(&bytes_from_str("2983516861981603475183396517230236507312677834593389672183220388281245998771486694352065708507565373600034869765710744815597618942118076247105485601874853242757534184343806854175072287347812643890289410595990347386409457167689582484235712468894740464043573274615641447856301244878154393102861415825789458184852997996988649215548573821930685665204611217117318111393594294104874430063019674247120748591777150819667640210797141288309115107673192317816379226908991888218721301744089179326238708095809121298560838798541196961439705135654775052248359216040038627491951137502071277281584723981176723957514850755279452265615787238057098188576096995197594282756994627816245461063022227774368136318125762411981698985685860925285857805295")),
    );
    let Py = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("17014380923615123805937029188952388711161875412615262887948293885858850497343958504250051227575918829305821365441704045856362554106139706638775446058936255571683040462953042825428009242658286841797320602371443574031091131517439172289994477361321797054317819299997280512366429755306723242014116407623748789564847715850837329731955116510688189802664824510439934248326924580976096881400973139547629858161083635854428217174749271282251348472410897149900982022876124444112630503688079657357120041251844756469769618566817698260508127340083530823689567276218762137199831409831462165807232679729974995193491297239880952999868230883337600179955106235620931323404644135186652646309596323438921296481048200519189305384166401414647528891563")),
        &ec768::Fp::decode_reduce(&bytes_from_str("975111721967473428195061601821317428471999857869200446829423885314994141955004243239136271066099627476402721907372522225304898260903507717327864662795760506140269379461611282812191713593285108867791347897423066670319695250485119931023443019149176430136779101925930700260455137366055512381359016545642475180882810678903444781469627244334580335026460543068551177407246228504376611853257210008067440571121629198207318915194287620810899101802114501586155028734802505231824437974927189174889211404286385767082499388785012042219875160643799947956725677605650479700300855462259861929214046074737761749916223615981675089571686829313218264740556971016896451615243183859878651834689833561667499284414901046473802980835581498944798600798")),
    );

    let P = ec768::Point {
        X: Px,
        Y: Py,
        Z: ec768::Fq::ONE,
    };

    let Qx = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("19555425161912148730969504942195074485144936249206158532724094783141908092751421201639017824735788302951330856758508410986860582075520966355778848697550752742041575345526637633326936410898304318479830409105145265584528953218052976589862748822921565460638033415994094118991005536362931889367508635637540838648349678602890333715964909785508714173999788420943187662273969124207437280584665218692338892721277631199842268778151042753315343723236213942273335749684853895884152626239656533793992392084114805537194672468511114485547997190884536925212168178620785565980646897030780451674283264917969026440382077714877489171571316834755604460251814291449853006191287591898705768464938287129407354164006430339665701042342208270547935485583")),
        &ec768::Fp::decode_reduce(&bytes_from_str("21438244608981606700657691279910457524747657500813694593482647725378787040575681915796465002690172580860226030466244773392873138607079589257371581291319150144091301864283750018764295008716565997651039350942701887595272090919289394654241522661263218597753655559721713819252210203360998364646725809713541036862612223299562768648911082684744907269152164588503662922746209506019101953882179168457622440452757529672156251228879923045093097353931801303779135620577741334851257005963395959185771410801572898930740136128075422509151626743686514613033503809158726413672846493219177014065969762467316229290140555524060330271209448766146670566218137633067530144955026759159750074562798124518253812333831574197302294471210262245263528025399")),
    );
    let Qy = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("5623523935456653145367491633566247080874923578154074901983019326980377436168658850080012559390252961377488621541042789712986494169068821182196838253496489401740799443445948786609700331652730540643117287019712426699922109495131983237221318248322173854270016261931909752130419514942808957907380987213056342385668070000872723514821546729000743845214732338027201726337212040839617349612375096920807816079162398868178589266264238336464422449045360680645674355325911147213963518645230251418408961438169392384959316024851866224050685661849421626940412401832127353667132554360742132145980417240884040605957542573630300105879303139043809933720804721500186863359411156440390130582086020844680212993528941940967513948982212318805304061421")),
        &ec768::Fp::decode_reduce(&bytes_from_str("15092929821743374745922861582223913826552392802410506134542370586187960417575927873843786089234440830773985666261922006950170709715174819562316243795603047156636523297977893058792377787032902357917773997843227067266158008293196602395095860424732314833875290885944012675582399604144402479374729300786645235773829399089802974666132530402903959065651690284004525026934792750240798217699981704469326348635162692579141948071476456937793187194570175590663125516599416018206646570118997268149303683944429039644529994963767858258483435756145087768580986235261720005519078289342696354694634905526592896088971427877971766311816254182603059317786065060807648909667335045585138230329596778239462679804383499413798701495801783815489560729610")),
    );

    let Q = ec768::Point {
        X: Qx,
        Y: Qy,
        Z: ec768::Fq::ONE,
    };

    let omPx = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("9386816074791403841616723568652387206435080137925792175754439003435251081396391423518710687540125693640299041981911515433530265524453492843499683340822115485181357478855586893070988280252069443762505516371339274324787502513493694948726363634650393862191347393578494988755233354430942187704077239074000412131880498415764828557391461057875619703072333441237546041359714529630773788546965042978189580831741046134700412936079451115276753640238240892557190452577892815365042259828783352315530651019229873634475432779561605634273202565763900555364502083397786517787452657701849930111519536942265433032473023971021802512931441919806819460360713993744291017823672149006835578757925068158404495418942986475466085934209184200093256024241")),
        &ec768::Fp::decode_reduce(&bytes_from_str("30864787646816393741826008360818254229308004681030119445591239636289742811029804242678729739785233676821193803838738949153617691979043819434138760912660229429979490479865620680627248500110202858148323999981542611966651244505354403661599236386535750867368612716924382077552841290104339393229855647263121492649667861461528829628118940424139862640592749080328521774219222666310727953819659796212664430180961153490308877438230331850167275625636179689770527900491196457021561548526579998289965543915942279022814121895830902908011482408276720218932215761974657480133552607527527643837188643253872018178133524828781967689221791916280630049641104411907828055697326935883308322313194750576084538793496198100639557682168767097259917323594")),
    );
    let omPy = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("10505260238203570426048629711301228991728703342087152868931018102423637471470453620238791230329364552711023761303254611070093659751769911858178155426072001962575099906459423560520991054988085976175624807883935577280167075985806649719817531136674794876473819815708979622900547631170829180429712325971462876454489688302139781956345961335058951568164432162869726882895394066544008893008055688992968082428203434337423824828777559054805530350260645234857794615193516301889509162378266381119847818508504928131167101152011715337713177640072111819747874385992049738121325770665610797876473039881979542816118425198919586520813167005109352917383433069476058567168501023103416662151869248819945157019416499864883949005246315814013794415296")),
        &ec768::Fp::decode_reduce(&bytes_from_str("688999725711646815235669014118751642613035325528106356175575554588469426053310466690339809382328043205993944717828823716558173631879983070405224102188782337584090250539032976906354070956390736519659166826479089830269781667100961232806102798867812375034494036864186945875906628079291077842245779796695280217524058017071706067400477998338774211039287173786267573331787867050792080846399907720971608067383468810987409272229977721441641587066604281997875103147349012178562899786548500034732674752905919052374582976415658840170439494291475685277349402937122880886372735739698553420721134759910420833736084181317151520545368482248663881887059388321008421789902203461977524327999965760802996676635582749653093031690202384909708106699")),
    );

    let omP = ec768::Point {
        X: omPx,
        Y: omPy,
        Z: ec768::Fq::ONE,
    };

    let omQx = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("23669143378754032281131424071849608073369844073909942292021558828443027528880326845882078468616892434307206010050073692464704979792107922611124835847026382676980266957926445192201225840611054868439120061620780566174618779638829877554844405288691281092536115905640570745049704121603568279616079848479041092069981398026924695993533003604033546413856942576262779246361062491352642245804332934619791687322117767501042501315717451440303276848208131167674152192856469313784131112111223309482505749508932805762912433722519969335839263938908414841575462772139134783854048748562562133078805840387330437451093517967138167604086092502011809044827620105626081885599071045560667370960044720008669658643494588649891677666167757822179232188197")),
        &ec768::Fp::decode_reduce(&bytes_from_str("11711782854799653214770037011478610955291342659595109947790463644136678573311233405770794755925085206912286304707914796967909742833418084126255929547722434352071930427791286805440924088973926293437822771511390130591522411856653219739915167810101438103894866957823675332605604373341658427760918554151115992605822505901918596486633109269754879010956022848547763933841365764732965679062548078560979967227902261310251105292844017827410934883804614677954640808417052582468716169650706632110591852649857225996864159140603355086137141100861089420893405723813790231798752494422455492579959461908475604533540323584922903583979291368240424120691501742580934991942020804773221093249636460211789289857962534417581560503122549922339681431965")),
    );
    let omQy = ec768::Fq::new(
        &ec768::Fp::decode_reduce(&bytes_from_str("28126783464097458026420319098086940177330540145416466674078299448281467389580686132120435816409784302270263905349249736536969433010070117848109125389932684318378295504097723407651640657810210299194211956498250663006704257607666200791832806855766071563986487755230738601113812721070187603879797306325284395207664876085959310022519105367262452807330303520759642811339392586687718234277243945795343898056225892639243101360971723845276865794575117004923869551041092216018324936302644824696426867297051798483197054910645684307315896566870784983953514024595751040007859273478181166685087773256691764370671615936233758728998149476534617903168835965339739778711773741895823171729246524288160283203948992104858608248348277040120494539570")),
        &ec768::Fp::decode_reduce(&bytes_from_str("28240074856643402501854907289116562349595814598141575797989197639407084083137889164500989904719854039844021245720949562392326262333270162773126059397128734391367763596730685053869630544545338171266000034595474380069393722300534328497409971326118933429660259835259177023263399181436645369293198634050260512665748736895357717076995644742304712326292167519260973036975100628514757028328289429259704474526736297911067295808436852000493544189152880766682678823947957257281098223160717896892531883227384826492682429924399406807808971906361410816557606748086166467077428558834745018178065713240339292582630146513450262963333924502655550285763030804164833259553937093171076151666194309078521655037848843669629804547509935695598815821706")),
    );

    let omQ = ec768::Point {
        X: omQx,
        Y: omQy,
        Z: ec768::Fq::ONE,
    };

    let gen_denom = 2.big(); // quadratic order is generated by 1 and (1 + theta)/gen_denom.
    let field_disc = -11.big();
    let order_conductor =
        "11880151867336273221055325404771361237333312702752638899261416546121912321109555864993171860267910595231175120944483".big();
    let quadratic_order =
        QuadraticOrder::new(field_disc.clone(), gen_denom, order_conductor.clone());

    let omega = QuadraticOrderEl::new(
        "3553122775101972431033181543151169691280653966950192848939404943599093727896082083613955560520393251585763440160899555".big(),
        1.big(),
        2.big(),
        quadratic_order.clone(),
    );

    let beta = QuadraticOrderEl::new(
        "129570395548089789703379992610993050488297497051786162844984049339441443037245617320450665996888679315584793498634139".big(),
        2.big(),
        1.big(),
        quadratic_order.clone(),
    );

    let two_dim = ec768::TwoDim::new(EA, omega, beta, P, Q, omP, omQ);
    let klapoti = ec768::Klapoti::new(quadratic_order, two_dim);

    let ideal = klapoti.secret();

    let strategy: [usize; 1733] = [
        610, 377, 233, 157, 144, 89, 55, 34, 21, 13, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
        3, 2, 1, 1, 1, 1, 1, 55, 34, 21, 13, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1,
        1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
        3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3,
        2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1,
        1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1,
        1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2,
        1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1,
        1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 233,
        144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3,
        2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1,
        13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21,
        13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 55, 34, 21,
        13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1,
        1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
        8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 89, 55, 34, 21, 13, 8, 5, 3, 2,
        1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5,
        3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 21, 13, 8, 5, 3, 2, 1, 1, 1,
        1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1,
        1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 34, 21, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1,
        1, 1, 3, 2, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 8, 5, 3, 2, 1, 1, 1, 1, 1,
        2, 1, 1, 1, 3, 2, 1, 1, 1, 1, 1, 13, 8, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 2, 1, 1, 1,
        1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1,
    ];

    klapoti.act(ideal, 261, strategy.to_vec());
}


#[cfg(test)]
mod tests {
    use super::{params128, params32, params512, params64, params768};
    use crate::util::core_cycles;

    #[test]
    fn params32_test() {
        params32();
    }

    #[test]
    fn params64_test() {
        params64();
    }

    #[test]
    fn params128_test() {
        params128();
    }

    #[test]
    fn params512_test() {
        params512();
    }

    #[test]
    fn params768_test() {
        params768();
    }

    #[test]
    fn cycles_test() {
        let mut tt = [0; 100];
        for i in 0..100 {
            let begin = core_cycles();
            params512();
            let end = core_cycles();
            tt[i] = end.wrapping_sub(begin);
        }
        tt.sort();
        println!(
            "Cycles:     {:?}",
            tt
        );
    }
}
