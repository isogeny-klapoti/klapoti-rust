#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub mod Fp117 {
    const N: usize = 2;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 117;
    const MODULUS: [u64; N] = [0xFFFFFFFFFFFFFFFF, 0x00155FFFFFFFFFFF];
    const HALF_MODULUS: [u64; N] = [0x0000000000000000, 0x000AB00000000000];
    const R_VAL: [u64; N] = [0x0000000000000BFA, 0x0000400000000000];
    const MINUS_R_VAL: [u64; N] = [0xFFFFFFFFFFFFF405, 0x00151FFFFFFFFFFF];
    const DR_VAL: [u64; N] = [0x00000000000017F4, 0x0000800000000000];
    const TR_VAL: [u64; N] = [0x00000000000023EE, 0x0000C00000000000];
    const QR_VAL: [u64; N] = [0x0000000000002FE8, 0x0001000000000000];
    const R2_VAL: [u64; N] = [0xFA02FE80C02FA053, 0x001060BFA02FE80B];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [0xD1CF38F4EBFF31E9, 0x0001B8E0C1722796];
    const TDEC_VAL: [u64; N] = [0x02FE80BFA02FE80B, 0x0014E00000000BFA];
    const SQRT_EH: [u8; 2] = [12, 21];
    const SQRT_EL: usize = 21;
    const FOURTH_ROOT_EH: [u8; 2] = [22, 10];
    const FOURTH_ROOT_EL: usize = 21;
    const P1: u64 = 2868903935;
    const P1DIV_M: u64 = 9169434198312072418;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp117Ext {
    use super::Fp117::Fp;
    const NQR_RE: Fp = Fp::new([0xB02349AC7D8B6CF2, 0x00006E1B649F9ECF]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp214 {
    const N: usize = 4;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 214;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000020FFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000108000,
    ];
    const R_VAL: [u64; N] = [
        0x000007C1F07C1F07,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000190000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFF83E0F83E0F8,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000007FFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x00000F83E0F83E0F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000110000,
    ];
    const TR_VAL: [u64; N] = [
        0x00001745D1745D17,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000090000,
    ];
    const QR_VAL: [u64; N] = [
        0x00001F07C1F07C1F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000010000,
    ];
    const R2_VAL: [u64; N] = [
        0x4E841D265156460D,
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0x000000000014F07C,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xE191A61CEBD9D188,
        0x5152A05A0AC1B0AB,
        0xD62F41FFFC5A4C68,
        0x00000000000FCDAD,
    ];
    const TDEC_VAL: [u64; N] = [
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0xC1F07C1F07C1F07C,
        0x00000000000A1F07,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 41;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 41;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp214Ext {
    use super::Fp214::Fp;
    const NQR_RE: Fp = Fp::new([
        0x3D11618D8905DA42,
        0xD18F2B1A8884F443,
        0xF8076F8328125C4D,
        0x000000000016FB92,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp509 {
    const N: usize = 8;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 509;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x107FFFFFFFFFFFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0840000000000000,
    ];
    const R_VAL: [u64; N] = [
        0x000000000000000F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0880000000000000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFF0,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x07FFFFFFFFFFFFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x000000000000001F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0080000000000000,
    ];
    const TR_VAL: [u64; N] = [
        0x000000000000002E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0900000000000000,
    ];
    const QR_VAL: [u64; N] = [
        0x000000000000003E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0100000000000000,
    ];
    const R2_VAL: [u64; N] = [
        0xE0F83E0F83E0F92E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x0CE0F83E0F83E0F8,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x33C62F5F2E7B71D7,
        0xF3311A525595291C,
        0x451B17497727F4C5,
        0x5CDEBD71C54997FB,
        0xFBF9A5511DBDADF3,
        0x94DC847854DB2654,
        0xCC2B39D273AC32BF,
        0x015944E461C393EB,
    ];
    const TDEC_VAL: [u64; N] = [
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0x0E8000000000000F,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 100;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 100;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp509Ext {
    use super::Fp509::Fp;
    const NQR_RE: Fp = Fp::new([
        0x657B1D5619957F90,
        0x7DC7D38596BB85C0,
        0x25E8365868E98865,
        0xF66F7F244671316B,
        0x1165CB8A00AE5B59,
        0x6AC9A5C6CD182171,
        0x1DACDC54AE08C8A3,
        0x0DBE2F9586713665,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp1757 {
    const N: usize = 28;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 1757;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x0000000013FFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000000A000000
    ];
    const R_VAL: [u64; N] = [
        0x0000000CCCCCCCCC, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000010000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFF333333333, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x0000000003FFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x0000001999999999, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000000C000000
    ];
    const TR_VAL: [u64; N] = [
        0x0000002666666666, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000008000000
    ];
    const QR_VAL: [u64; N] = [
        0x0000003333333333, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000004000000
    ];
    const R2_VAL: [u64; N] = [
        0xA3D70A3D70A3D70A, 0xCCCCCCCCCCCCCD70, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0x0000000004CCCCCC
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xBCD35A858793DD97, 0xDFA43FE5C91D14E3, 0xF837B4A2339C0EBE, 0xA027525460AA64C2, 0xAC083126E9E1B089, 0x978D4FDF3B645A1C, 0xB645A1CAC083126E, 0x083126E978D4FDF3, 0x8D4FDF3B645A1CAC, 0x45A1CAC083126E97, 0x3126E978D4FDF3B6, 0x4FDF3B645A1CAC08, 0xA1CAC083126E978D, 0x26E978D4FDF3B645, 0xDF3B645A1CAC0831, 0xCAC083126E978D4F, 0xE978D4FDF3B645A1, 0x3B645A1CAC083126, 0xC083126E978D4FDF, 0x78D4FDF3B645A1CA, 0x645A1CAC083126E9, 0x83126E978D4FDF3B, 0xD4FDF3B645A1CAC0, 0x5A1CAC083126E978, 0x126E978D4FDF3B64, 0xFDF3B645A1CAC083, 0x1CAC083126E978D4, 0x00000000133B645A
    ];
    const TDEC_VAL: [u64; N] = [
        0xCCCCCCCCCCCCCD70, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0xCCCCCCCCCCCCCCCC, 0x000000000CCCCCCC
    ];
    const SQRT_EH: [u8; 1] = [
        20
    ];
    const SQRT_EL: usize = 350;
    const FOURTH_ROOT_EH: [u8; 1] = [
        10
    ];
    const FOURTH_ROOT_EL: usize = 350;
    const P1: u64 = 2684354559;
    const P1DIV_M: u64 = 11068046455220847252;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp1757Ext {
    use super::Fp1757::Fp;
    const NQR_RE: Fp = Fp::new([
        0xE3D14C4EF997CFF5, 0x905772A763118DB8, 0x5A418E76C791139A, 0xEFD60FF36E61C3E7, 0x87454F5BD311031E, 0xB806F20E6C01F9DA, 0x40164FB3ABC89C43, 0x79D1E908988D59B4, 0xA517BD336C009B8F, 0x3DC34D35BC9817B7, 0xD7989C1C57E990A2, 0x399FB72360DA2866, 0xC9EE0E93286CDE02, 0xC8FE91F83AB8CC9A, 0x701DBBE5F62CB7F7, 0x2228F5D1373EEB56, 0x0E780CEB6AB8D54B, 0x845F883D73C5E4E5, 0x36D17C395749E5A2, 0xFB99DC4A3751F979, 0x3BE49ACA2E68B643, 0xCC60F6B1034322A8, 0xCE47CFE25D85C5DB, 0x7DC906EBB88D05E3, 0x74F3D10AAC766AB5, 0x0D6FF54B7D5A5397, 0xAF578D13FEA24B20, 0x000000000C416D49
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}
