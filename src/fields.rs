#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub mod Fp117 {
    const N: usize = 2;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 117;
    const MODULUS: [u64; N] = [0xFFFFFFFFFFFFFFFF, 0x00155FFFFFFFFFFF];
    const HALF_MODULUS: [u64; N] = [0x0000000000000000, 0x000AB00000000000];
    const R_VAL: [u64; N] = [0x0000000000000BFA, 0x0000400000000000];
    const MINUS_R_VAL: [u64; N] = [0xFFFFFFFFFFFFF405, 0x00151FFFFFFFFFFF];
    const DR_VAL: [u64; N] = [0x00000000000017F4, 0x0000800000000000];
    const TR_VAL: [u64; N] = [0x00000000000023EE, 0x0000C00000000000];
    const QR_VAL: [u64; N] = [0x0000000000002FE8, 0x0001000000000000];
    const R2_VAL: [u64; N] = [0xFA02FE80C02FA053, 0x001060BFA02FE80B];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [0xD1CF38F4EBFF31E9, 0x0001B8E0C1722796];
    const TDEC_VAL: [u64; N] = [0x02FE80BFA02FE80B, 0x0014E00000000BFA];
    const SQRT_EH: [u8; 2] = [12, 21];
    const SQRT_EL: usize = 21;
    const FOURTH_ROOT_EH: [u8; 2] = [22, 10];
    const FOURTH_ROOT_EL: usize = 21;
    const P1: u64 = 2868903935;
    const P1DIV_M: u64 = 9169434198312072418;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp117Ext {
    use super::Fp117::Fp;
    const NQR_RE: Fp = Fp::new([0xB02349AC7D8B6CF2, 0x00006E1B649F9ECF]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp214 {
    const N: usize = 4;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 214;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000020FFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000108000,
    ];
    const R_VAL: [u64; N] = [
        0x000007C1F07C1F07,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000190000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFF83E0F83E0F8,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000007FFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x00000F83E0F83E0F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000110000,
    ];
    const TR_VAL: [u64; N] = [
        0x00001745D1745D17,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000090000,
    ];
    const QR_VAL: [u64; N] = [
        0x00001F07C1F07C1F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000010000,
    ];
    const R2_VAL: [u64; N] = [
        0x4E841D265156460D,
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0x000000000014F07C,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xE191A61CEBD9D188,
        0x5152A05A0AC1B0AB,
        0xD62F41FFFC5A4C68,
        0x00000000000FCDAD,
    ];
    const TDEC_VAL: [u64; N] = [
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0xC1F07C1F07C1F07C,
        0x00000000000A1F07,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 41;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 41;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp214Ext {
    use super::Fp214::Fp;
    const NQR_RE: Fp = Fp::new([
        0x3D11618D8905DA42,
        0xD18F2B1A8884F443,
        0xF8076F8328125C4D,
        0x000000000016FB92,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp509 {
    const N: usize = 8;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 509;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x107FFFFFFFFFFFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0840000000000000,
    ];
    const R_VAL: [u64; N] = [
        0x000000000000000F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0880000000000000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFF0,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x07FFFFFFFFFFFFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x000000000000001F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0080000000000000,
    ];
    const TR_VAL: [u64; N] = [
        0x000000000000002E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0900000000000000,
    ];
    const QR_VAL: [u64; N] = [
        0x000000000000003E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0100000000000000,
    ];
    const R2_VAL: [u64; N] = [
        0xE0F83E0F83E0F92E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x0CE0F83E0F83E0F8,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x33C62F5F2E7B71D7,
        0xF3311A525595291C,
        0x451B17497727F4C5,
        0x5CDEBD71C54997FB,
        0xFBF9A5511DBDADF3,
        0x94DC847854DB2654,
        0xCC2B39D273AC32BF,
        0x015944E461C393EB,
    ];
    const TDEC_VAL: [u64; N] = [
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0x0E8000000000000F,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 100;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 100;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp509Ext {
    use super::Fp509::Fp;
    const NQR_RE: Fp = Fp::new([
        0x657B1D5619957F90,
        0x7DC7D38596BB85C0,
        0x25E8365868E98865,
        0xF66F7F244671316B,
        0x1165CB8A00AE5B59,
        0x6AC9A5C6CD182171,
        0x1DACDC54AE08C8A3,
        0x0DBE2F9586713665,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp512 {
    const N: usize = 26;
    const BITLEN: usize = 1649;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000157FFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000AC0000000000
    ];
    const R_VAL: [u64; N] = [
        0x000000000000BE82, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001500000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFF417D, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000007FFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x0000000000017D05, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001480000000000
    ];
    const TR_VAL: [u64; N] = [
        0x0000000000023B88, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001400000000000
    ];
    const QR_VAL: [u64; N] = [
        0x000000000002FA0B, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001380000000000
    ];
    const R2_VAL: [u64; N] = [
        0xA0BE82FA99AEDDCD, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0x0000702FA0BE82FA
    ];
    const THREE_INV_VAL: [u64; N] = [
        0xAAAAAAAAAAAAEA2B, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0x0000E2AAAAAAAAAA
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x22BFD628816639E6, 0x5072EEDF3C26544D, 0x6914364F55D4044D, 0x20CF68CC22B6F60F, 0xBEDBFFBAC2B0E446, 0x3BEA31FA77E33A3C, 0x52E1C822BFA02D70, 0x3EE22E58AE4F33A1, 0x9C061E219BD4A932, 0xBC70F706BB9195CD, 0xE875B1119BFC39F1, 0xA279F95C55DDE394, 0xA662A64772C3CC71, 0xAF81D56D5FF45B67, 0x07A403FACF42E11C, 0xFC1C452CD2CBF039, 0xAA2A5A92FC5D6367, 0x62B6C3C28D729A95, 0x2CCA8DC854348F8A, 0xBD81CD2F380F8853, 0x35CE896A9B12F488, 0x3B8F8643A2D15903, 0x269D95E4B075D20A, 0x32AE2948E9CFE39D, 0x8F92A0DEA895A1EC, 0x0000ACFEBDB4E826
    ];
    const TDEC_VAL: [u64; N] = [
        0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x0000D8000000BE82
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        22, 2
    ];
    const SQRT_EL: usize = 328;
    const FOURTH_ROOT_EH: [u8; 2] = [
        11, 1
    ];
    const FOURTH_ROOT_EL: usize = 328;
    const P1: u64 = 2885681151;
    const P1DIV_M: u64 = 9008875022256306739;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp512Ext {
    use super::Fp512::Fp;
    const NQR_RE: Fp = Fp::new([
        0x77729A1D1AEAAA88, 0xED0AC37D306C5403, 0x8F94E8C847951FE7, 0x57E02E7A63EB8170, 0x4B319B9213772DE8, 0x1F4BE06FFB2684EE, 0x0EBF35CED9043D08, 0x702E0254E9EB0581, 0x1CE2265E2270703A, 0x13C98414EDED4F18, 0x165D41976959FDE7, 0x61BFA890212D38EB, 0x83882CDAD4289E3A, 0xB6D987F987F7FE62, 0x15B1CEFC2E809C0A, 0x1D9B6394989E76E6, 0x1B4E6D1EEF9D389C, 0xF4FBF7AE197CFF88, 0x74CCC69B8DF950A8, 0xA9E267F488561D5A, 0x498ECA58DDA07004, 0x9B8D78A3ECDC764A, 0xB3472A5F16DCFD05, 0xAD963D0EB0EE9D15, 0x2DCCD8537B512868, 0x00003EC2287184E5
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 1518;
    const P1_DIV_N: [u8; 190] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43
    ];

    const P1_DIV_C_BITLEN: usize = 1525;
    const P1_DIV_C: [u8; 191] = [
        6, 233, 180, 87, 49, 179, 34, 64, 92, 195, 249, 252, 84, 107, 161, 82, 71, 204, 214, 23, 230, 234, 189, 2, 37, 215, 68, 128, 128, 48, 221, 140, 98, 227, 156, 126, 180, 136, 116, 148, 107, 187, 7, 209, 73, 224, 127, 40, 0, 43, 89, 127, 1, 201, 218, 178, 68, 170, 175, 181, 52, 218, 58, 56, 30, 185, 53, 119, 80, 9, 91, 22, 114, 111, 64, 115, 24, 175, 86, 184, 17, 62, 95, 124, 207, 177, 54, 246, 53, 189, 86, 34, 8, 159, 191, 145, 161, 254, 197, 97, 86, 25, 253, 81, 54, 39, 223, 133, 19, 117, 223, 57, 107, 201, 172, 161, 35, 60, 209, 136, 253, 231, 250, 121, 28, 252, 76, 57, 234, 63, 228, 167, 196, 103, 2, 136, 143, 103, 206, 246, 228, 214, 191, 199, 180, 137, 21, 241, 180, 34, 56, 143, 212, 252, 27, 232, 176, 90, 40, 215, 237, 6, 252, 132, 59, 241, 12, 194, 131, 230, 67, 21, 40, 12, 97, 239, 60, 149, 21, 185, 19, 41, 254, 216, 12, 22, 132, 188, 139, 215, 27
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

