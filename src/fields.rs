#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub mod Fp117 {
    const N: usize = 2;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 117;
    const MODULUS: [u64; N] = [0xFFFFFFFFFFFFFFFF, 0x00155FFFFFFFFFFF];
    const HALF_MODULUS: [u64; N] = [0x0000000000000000, 0x000AB00000000000];
    const R_VAL: [u64; N] = [0x0000000000000BFA, 0x0000400000000000];
    const MINUS_R_VAL: [u64; N] = [0xFFFFFFFFFFFFF405, 0x00151FFFFFFFFFFF];
    const DR_VAL: [u64; N] = [0x00000000000017F4, 0x0000800000000000];
    const TR_VAL: [u64; N] = [0x00000000000023EE, 0x0000C00000000000];
    const QR_VAL: [u64; N] = [0x0000000000002FE8, 0x0001000000000000];
    const R2_VAL: [u64; N] = [0xFA02FE80C02FA053, 0x001060BFA02FE80B];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [0xD1CF38F4EBFF31E9, 0x0001B8E0C1722796];
    const TDEC_VAL: [u64; N] = [0x02FE80BFA02FE80B, 0x0014E00000000BFA];
    const SQRT_EH: [u8; 2] = [12, 21];
    const SQRT_EL: usize = 21;
    const FOURTH_ROOT_EH: [u8; 2] = [22, 10];
    const FOURTH_ROOT_EL: usize = 21;
    const P1: u64 = 2868903935;
    const P1DIV_M: u64 = 9169434198312072418;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp117Ext {
    use super::Fp117::Fp;
    const NQR_RE: Fp = Fp::new([0xB02349AC7D8B6CF2, 0x00006E1B649F9ECF]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp214 {
    const N: usize = 4;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 214;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000020FFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000108000,
    ];
    const R_VAL: [u64; N] = [
        0x000007C1F07C1F07,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000190000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFF83E0F83E0F8,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x000000000007FFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x00000F83E0F83E0F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000110000,
    ];
    const TR_VAL: [u64; N] = [
        0x00001745D1745D17,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000090000,
    ];
    const QR_VAL: [u64; N] = [
        0x00001F07C1F07C1F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000010000,
    ];
    const R2_VAL: [u64; N] = [
        0x4E841D265156460D,
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0x000000000014F07C,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xE191A61CEBD9D188,
        0x5152A05A0AC1B0AB,
        0xD62F41FFFC5A4C68,
        0x00000000000FCDAD,
    ];
    const TDEC_VAL: [u64; N] = [
        0xF07C1F07C22CAA32,
        0x1F07C1F07C1F07C1,
        0xC1F07C1F07C1F07C,
        0x00000000000A1F07,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 41;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 41;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp214Ext {
    use super::Fp214::Fp;
    const NQR_RE: Fp = Fp::new([
        0x3D11618D8905DA42,
        0xD18F2B1A8884F443,
        0xF8076F8328125C4D,
        0x000000000016FB92,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp509 {
    const N: usize = 8;
    const WIN_LEN: usize = 5;
    const BITLEN: usize = 509;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x107FFFFFFFFFFFFF,
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0840000000000000,
    ];
    const R_VAL: [u64; N] = [
        0x000000000000000F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0880000000000000,
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFF0,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0xFFFFFFFFFFFFFFFF,
        0x07FFFFFFFFFFFFFF,
    ];
    const DR_VAL: [u64; N] = [
        0x000000000000001F,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0080000000000000,
    ];
    const TR_VAL: [u64; N] = [
        0x000000000000002E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0900000000000000,
    ];
    const QR_VAL: [u64; N] = [
        0x000000000000003E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0100000000000000,
    ];
    const R2_VAL: [u64; N] = [
        0xE0F83E0F83E0F92E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x0CE0F83E0F83E0F8,
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x33C62F5F2E7B71D7,
        0xF3311A525595291C,
        0x451B17497727F4C5,
        0x5CDEBD71C54997FB,
        0xFBF9A5511DBDADF3,
        0x94DC847854DB2654,
        0xCC2B39D273AC32BF,
        0x015944E461C393EB,
    ];
    const TDEC_VAL: [u64; N] = [
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0xF83E0F83E0F83E0F,
        0x0F83E0F83E0F83E0,
        0xE0F83E0F83E0F83E,
        0x3E0F83E0F83E0F83,
        0x83E0F83E0F83E0F8,
        0x0E8000000000000F,
    ];
    const SQRT_EH: [u8; 2] = [2, 2];
    const SQRT_EL: usize = 100;
    const FOURTH_ROOT_EH: [u8; 2] = [1, 1];
    const FOURTH_ROOT_EL: usize = 100;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core! {}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests! {}
    }
}

pub mod Fp509Ext {
    use super::Fp509::Fp;
    const NQR_RE: Fp = Fp::new([
        0x657B1D5619957F90,
        0x7DC7D38596BB85C0,
        0x25E8365868E98865,
        0xF66F7F244671316B,
        0x1165CB8A00AE5B59,
        0x6AC9A5C6CD182171,
        0x1DACDC54AE08C8A3,
        0x0DBE2F9586713665,
    ]);

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}



pub mod Fp64 {
    const N: usize = 4;
    const BITLEN: usize = 250;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x02BFFFFFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0160000000000000
    ];
    const R_VAL: [u64; N] = [
        0x000000000000005D, 0x0000000000000000, 0x0000000000000000, 0x0040000000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFA2, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x027FFFFFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x00000000000000BA, 0x0000000000000000, 0x0000000000000000, 0x0080000000000000
    ];
    const TR_VAL: [u64; N] = [
        0x0000000000000117, 0x0000000000000000, 0x0000000000000000, 0x00C0000000000000
    ];
    const QR_VAL: [u64; N] = [
        0x0000000000000174, 0x0000000000000000, 0x0000000000000000, 0x0100000000000000
    ];
    const R2_VAL: [u64; N] = [
        0x5D1745D1745D391F, 0x45D1745D1745D174, 0x745D1745D1745D17, 0x0205D1745D1745D1
    ];
    const THREE_INV_VAL: [u64; N] = [
        0xAAAAAAAAAAAAAAC9, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0x01EAAAAAAAAAAAAA
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xFF9D872D7A969DF5, 0x1C4602B15596FBF5, 0x61E63A15ED26A8DF, 0x02A652B4696683F1
    ];
    const TDEC_VAL: [u64; N] = [
        0x45D1745D1745D174, 0x745D1745D1745D17, 0x1745D1745D1745D1, 0x010000000000005D
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        16, 5
    ];
    const SQRT_EL: usize = 48;
    const FOURTH_ROOT_EH: [u8; 2] = [
        24, 2
    ];
    const FOURTH_ROOT_EL: usize = 48;
    const P1: u64 = 2952790015;
    const P1DIV_M: u64 = 8384883678954850968;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp64Ext {
    use super::Fp64::Fp;
    const NQR_RE: Fp = Fp::new([
        0x45CA09424E8F5FD3, 0x2FBC3486ED01A5DA, 0xF9EC9F7497D1A070, 0x0233D933DAA112BB
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 119;
    const P1_DIV_N: [u8; 15] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88
    ];

    const P1_DIV_C_BITLEN: usize = 126;
    const P1_DIV_C: [u8; 16] = [
        79, 47, 79, 26, 81, 46, 197, 55, 170, 234, 199, 210, 254, 154, 250, 56
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp128 {
    const N: usize = 7;
    const BITLEN: usize = 425;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000001E7FFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000F400000000
    ];
    const R_VAL: [u64; N] = [
        0x0000000000864B8A, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000F000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFF79B475, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000000F7FFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x00000000010C9714, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000001E000000000
    ];
    const TR_VAL: [u64; N] = [
        0x000000000192E29F, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000000E800000000
    ];
    const QR_VAL: [u64; N] = [
        0x0000000002192E29, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000001D800000000
    ];
    const R2_VAL: [u64; N] = [
        0xD608AB2BD324AB72, 0x1D60864B8A7DE6D1, 0xD1D60864B8A7DE6D, 0x6D1D60864B8A7DE6, 0xE6D1D60864B8A7DE, 0xDE6D1D60864B8A7D, 0x000000860864B8A7
    ];
    const THREE_INV_VAL: [u64; N] = [
        0xAAAAAAAAAAD76E83, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0x000000F2AAAAAAAA
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xECB4FCC06FD0A6AE, 0xDFBB2C99C9EEFBFC, 0x9A5BBDCB9B61E846, 0x21EDD5BB0399E967, 0x03FB808C777754F9, 0xDBD3045502154851, 0x0000017BA6ADD12E
    ];
    const TDEC_VAL: [u64; N] = [
        0x1D60864B8A7DE6D1, 0xD1D60864B8A7DE6D, 0x6D1D60864B8A7DE6, 0xE6D1D60864B8A7DE, 0xDE6D1D60864B8A7D, 0x7DE6D1D60864B8A7, 0x0000019800864B8A
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        20, 7
    ];
    const SQRT_EL: usize = 83;
    const FOURTH_ROOT_EH: [u8; 2] = [
        26, 3
    ];
    const FOURTH_ROOT_EL: usize = 83;
    const P1: u64 = 4093640703;
    const P1DIV_M: u64 = 907216926385658155;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp128Ext {
    use super::Fp128::Fp;
    const NQR_RE: Fp = Fp::new([
        0xF697099B1EB84FF2, 0x4A7AE374C5527436, 0x9211C675AC18246E, 0xCE0F16D69D09605A, 0x57D56E87C79C71FA, 0x77F621E59096C9B5, 0x000001776DA71D7B
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 294;
    const P1_DIV_N: [u8; 37] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61
    ];

    const P1_DIV_C_BITLEN: usize = 302;
    const P1_DIV_C: [u8; 38] = [
        197, 158, 156, 167, 128, 152, 1, 4, 242, 47, 248, 143, 169, 107, 1, 175, 112, 209, 202, 193, 207, 119, 226, 157, 223, 125, 143, 81, 52, 21, 147, 101, 144, 163, 112, 43, 127, 39
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}



pub mod Fp256 {
    const N: usize = 14;
    const BITLEN: usize = 896;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xA7FFFFFFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x5400000000000000
    ];
    const R_VAL: [u64; N] = [
        0x0000000000000001, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x5800000000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x4FFFFFFFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x0000000000000003, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0800000000000000
    ];
    const TR_VAL: [u64; N] = [
        0x0000000000000004, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x6000000000000000
    ];
    const QR_VAL: [u64; N] = [
        0x0000000000000006, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x1000000000000000
    ];
    const R2_VAL: [u64; N] = [
        0x6186186186186188, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x4618618618618618
    ];
    const THREE_INV_VAL: [u64; N] = [
        0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x8D55555555555555
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x0D584ADCAA7977BD, 0x7C72A98F9AB77E46, 0x8CC8E86BB244B852, 0x55F8181AC21B9667, 0xBE9FF0F65A480982, 0x0334E17467625350, 0xE68369F471FFB93C, 0xDC3AEF38878F7041, 0xE757B5EAD35B5C05, 0x2DEA2984FD5192EB, 0xD543A456228DB26F, 0x393165CEF62FD271, 0x2C2C56CC64112377, 0xA1BA104F2B42D00A
    ];
    const TDEC_VAL: [u64; N] = [
        0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x1861861861861861, 0x6186186186186186, 0x8618618618618618, 0x4000000000000001
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        16, 10
    ];
    const SQRT_EL: usize = 177;
    const FOURTH_ROOT_EH: [u8; 2] = [
        8, 5
    ];
    const FOURTH_ROOT_EL: usize = 177;
    const P1: u64 = 2818572287;
    const P1DIV_M: u64 = 9662580239058850195;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp256Ext {
    use super::Fp256::Fp;
    const NQR_RE: Fp = Fp::new([
        0x4428817038EF52F9, 0xD0575C8E74B8C883, 0x90F2F8E2D4BF0EDB, 0x8D629E15873AC27A, 0x114986BA62E04D9F, 0xEC161003F8192397, 0xD1B78236B498E971, 0x91AD0F82CFF29709, 0x90CB50CC7F61B1B0, 0xC5AFEFB65A8B27AA, 0x84CA4C975885E338, 0xD4C6B15195537BBE, 0xE0C4D5D9900E3268, 0x8CA5CF0728504285
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 765;
    const P1_DIV_N: [u8; 96] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21
    ];

    const P1_DIV_C_BITLEN: usize = 772;
    const P1_DIV_C: [u8; 97] = [
        4, 220, 84, 255, 185, 178, 232, 71, 165, 218, 240, 173, 19, 232, 217, 98, 204, 87, 183, 181, 42, 180, 106, 23, 114, 114, 171, 65, 158, 53, 103, 87, 198, 182, 72, 150, 224, 224, 244, 14, 144, 48, 58, 223, 219, 78, 177, 9, 177, 79, 213, 120, 16, 76, 225, 153, 3, 189, 240, 63, 67, 125, 74, 44, 216, 134, 68, 146, 188, 219, 183, 129, 238, 201, 135, 118, 122, 254, 221, 142, 154, 27, 113, 1, 207, 36, 200, 55, 112, 46, 18, 100, 207, 252, 228, 152, 13
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp512 {
    const N: usize = 26;
    const BITLEN: usize = 1649;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000157FFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000AC0000000000
    ];
    const R_VAL: [u64; N] = [
        0x000000000000BE82, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001500000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFF417D, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000007FFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x0000000000017D05, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001480000000000
    ];
    const TR_VAL: [u64; N] = [
        0x0000000000023B88, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001400000000000
    ];
    const QR_VAL: [u64; N] = [
        0x000000000002FA0B, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0001380000000000
    ];
    const R2_VAL: [u64; N] = [
        0xA0BE82FA99AEDDCD, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0x0000702FA0BE82FA
    ];
    const THREE_INV_VAL: [u64; N] = [
        0xAAAAAAAAAAAAEA2B, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0x0000E2AAAAAAAAAA
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x22BFD628816639E6, 0x5072EEDF3C26544D, 0x6914364F55D4044D, 0x20CF68CC22B6F60F, 0xBEDBFFBAC2B0E446, 0x3BEA31FA77E33A3C, 0x52E1C822BFA02D70, 0x3EE22E58AE4F33A1, 0x9C061E219BD4A932, 0xBC70F706BB9195CD, 0xE875B1119BFC39F1, 0xA279F95C55DDE394, 0xA662A64772C3CC71, 0xAF81D56D5FF45B67, 0x07A403FACF42E11C, 0xFC1C452CD2CBF039, 0xAA2A5A92FC5D6367, 0x62B6C3C28D729A95, 0x2CCA8DC854348F8A, 0xBD81CD2F380F8853, 0x35CE896A9B12F488, 0x3B8F8643A2D15903, 0x269D95E4B075D20A, 0x32AE2948E9CFE39D, 0x8F92A0DEA895A1EC, 0x0000ACFEBDB4E826
    ];
    const TDEC_VAL: [u64; N] = [
        0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x82FA0BE82FA0BE82, 0xBE82FA0BE82FA0BE, 0xA0BE82FA0BE82FA0, 0x2FA0BE82FA0BE82F, 0xE82FA0BE82FA0BE8, 0x0BE82FA0BE82FA0B, 0xFA0BE82FA0BE82FA, 0x0000D8000000BE82
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        22, 2
    ];
    const SQRT_EL: usize = 328;
    const FOURTH_ROOT_EH: [u8; 2] = [
        11, 1
    ];
    const FOURTH_ROOT_EL: usize = 328;
    const P1: u64 = 2885681151;
    const P1DIV_M: u64 = 9008875022256306739;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp512Ext {
    use super::Fp512::Fp;
    const NQR_RE: Fp = Fp::new([
        0x77729A1D1AEAAA88, 0xED0AC37D306C5403, 0x8F94E8C847951FE7, 0x57E02E7A63EB8170, 0x4B319B9213772DE8, 0x1F4BE06FFB2684EE, 0x0EBF35CED9043D08, 0x702E0254E9EB0581, 0x1CE2265E2270703A, 0x13C98414EDED4F18, 0x165D41976959FDE7, 0x61BFA890212D38EB, 0x83882CDAD4289E3A, 0xB6D987F987F7FE62, 0x15B1CEFC2E809C0A, 0x1D9B6394989E76E6, 0x1B4E6D1EEF9D389C, 0xF4FBF7AE197CFF88, 0x74CCC69B8DF950A8, 0xA9E267F488561D5A, 0x498ECA58DDA07004, 0x9B8D78A3ECDC764A, 0xB3472A5F16DCFD05, 0xAD963D0EB0EE9D15, 0x2DCCD8537B512868, 0x00003EC2287184E5
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 1518;
    const P1_DIV_N: [u8; 190] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43
    ];

    const P1_DIV_C_BITLEN: usize = 1525;
    const P1_DIV_C: [u8; 191] = [
        6, 233, 180, 87, 49, 179, 34, 64, 92, 195, 249, 252, 84, 107, 161, 82, 71, 204, 214, 23, 230, 234, 189, 2, 37, 215, 68, 128, 128, 48, 221, 140, 98, 227, 156, 126, 180, 136, 116, 148, 107, 187, 7, 209, 73, 224, 127, 40, 0, 43, 89, 127, 1, 201, 218, 178, 68, 170, 175, 181, 52, 218, 58, 56, 30, 185, 53, 119, 80, 9, 91, 22, 114, 111, 64, 115, 24, 175, 86, 184, 17, 62, 95, 124, 207, 177, 54, 246, 53, 189, 86, 34, 8, 159, 191, 145, 161, 254, 197, 97, 86, 25, 253, 81, 54, 39, 223, 133, 19, 117, 223, 57, 107, 201, 172, 161, 35, 60, 209, 136, 253, 231, 250, 121, 28, 252, 76, 57, 234, 63, 228, 167, 196, 103, 2, 136, 143, 103, 206, 246, 228, 214, 191, 199, 180, 137, 21, 241, 180, 34, 56, 143, 212, 252, 27, 232, 176, 90, 40, 215, 237, 6, 252, 132, 59, 241, 12, 194, 131, 230, 67, 21, 40, 12, 97, 239, 60, 149, 21, 185, 19, 41, 254, 216, 12, 22, 132, 188, 139, 215, 27
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp768 {
    const N: usize = 38;
    const BITLEN: usize = 2417;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x0001B7FFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000DC0000000000
    ];
    const R_VAL: [u64; N] = [
        0x00000000000094F2, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000100000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFF6B0D, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x0001A7FFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x00000000000129E4, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000200000000000
    ];
    const TR_VAL: [u64; N] = [
        0x000000000001BED6, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000300000000000
    ];
    const QR_VAL: [u64; N] = [
        0x00000000000253C8, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000400000000000
    ];
    const R2_VAL: [u64; N] = [
        0x4F2094F25FF7E02E, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x00001094F2094F20
    ];
    const THREE_INV_VAL: [u64; N] = [
        0xAAAAAAAAAAAADC50, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0x00012AAAAAAAAAAA
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0xDB197A13AB27E352, 0xBC610CA7B311B511, 0xA7473F1D0055BC3B, 0xE48BBBBB7748D67B, 0x6324809DDFA94C7A, 0x34071EFE6F65F559, 0x35D7EDEAD313255D, 0xF812998716218A59, 0x48B53571839406DF, 0x834D1FB792168DDD, 0x5EC3D77BAF4AE09D, 0xD70F5C5B613FFFB4, 0x950ECA9CAAA740B8, 0x1CB38425C59690D1, 0x8C2FED5D04C25965, 0xB80C32E1A95E5784, 0x1B2F84FA7B0FC2C5, 0xEC39875527E725A4, 0x7C54BB943624BDAB, 0x7DCCE98E1A56DF1B, 0x3FE031305DA05A0E, 0x023867C820826E91, 0xFD92CFB08DE1391B, 0x6798DBBCD53E8D6E, 0x5824144AD2D41F00, 0xF63FD267CC10E83B, 0x8C2A04C451980316, 0xC91AA3AEDC957B1D, 0xDE7FE49FA2E4001A, 0x1B356D932E3A1913, 0xDB2B1687F4B0020B, 0xB9045BEF0E508056, 0x4ED103501403EBAB, 0xE109D63C9F1515AF, 0xC700F5672C88CD55, 0xEEA1FD90D77DA77D, 0x88C76D4856ABE650, 0x0000FE94342C8AC5
    ];
    const TDEC_VAL: [u64; N] = [
        0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x2094F2094F2094F2, 0xF2094F2094F2094F, 0x4F2094F2094F2094, 0x94F2094F2094F209, 0x094F2094F2094F20, 0x00008800000094F2
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        16, 27
    ];
    const SQRT_EL: usize = 481;
    const FOURTH_ROOT_EH: [u8; 2] = [
        24, 13
    ];
    const FOURTH_ROOT_EL: usize = 481;
    const P1: u64 = 3690987519;
    const P1DIV_M: u64 = 3018558126968070777;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp768Ext {
    use super::Fp768::Fp;
    const NQR_RE: Fp = Fp::new([
        0xF14F976D8C1FC52C, 0xE7A5A146B9A6076D, 0x8B4EAB773AE42B8D, 0x7D1ABF513708CF69, 0xD6DAD2B4B49AA0CC, 0x388F30F95B437D9D, 0xFF2372EEC40E3E8D, 0x18A5843383B3EA89, 0xAD26DD0B7A7C97C3, 0x214C58220412DB76, 0x1A1182C37BB63AA2, 0x38C7D8B61F85CCAC, 0x1A41EBFCDC55D524, 0xA8A8EB6E390B8410, 0x494B919BF40E4B66, 0xDCFBDB0A75396312, 0x42E0FD51F0B8353A, 0x8D6C7530958935CF, 0xCE948627A3DA17D0, 0x418A785750550D96, 0xEE87E59D907C80E5, 0x8DEEEB4498F49F48, 0xD2AE437273F16956, 0xDC59AAE378D30C0F, 0x6EC89B8E9A80132C, 0x9B4043563E72A23B, 0xEECCDC48931E838F, 0x04A33C79D4B14D28, 0x11BCE79F70C56FE4, 0x14D78E6B3F1BA20E, 0xF68B219E67AAB6FD, 0xFF1432C38F6514B3, 0x9A587AB722F61498, 0xAF1848B26E8DA2BF, 0x012E0EDEAC38E084, 0x216E6B7B0B0B1BF6, 0xACFAD6609121D939, 0x0000182DCF5EB946
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 2286;
    const P1_DIV_N: [u8; 286] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55
    ];

    const P1_DIV_C_BITLEN: usize = 2294;
    const P1_DIV_C: [u8; 287] = [
        77, 156, 186, 124, 221, 85, 79, 66, 255, 181, 142, 168, 78, 138, 196, 143, 103, 139, 24, 236, 197, 147, 78, 110, 47, 177, 153, 27, 84, 219, 12, 5, 136, 69, 6, 254, 252, 19, 240, 177, 103, 146, 236, 67, 145, 174, 131, 95, 28, 35, 47, 69, 55, 170, 115, 67, 255, 240, 216, 255, 213, 235, 33, 247, 62, 32, 12, 10, 158, 118, 145, 133, 34, 64, 16, 3, 47, 108, 103, 52, 124, 96, 156, 130, 12, 182, 182, 50, 68, 0, 129, 18, 118, 228, 175, 232, 204, 202, 52, 237, 86, 211, 115, 28, 231, 118, 63, 109, 144, 101, 87, 22, 109, 243, 119, 161, 252, 103, 52, 170, 5, 168, 10, 39, 63, 163, 62, 43, 239, 22, 147, 209, 236, 37, 137, 106, 161, 251, 253, 58, 118, 84, 193, 57, 125, 120, 60, 246, 251, 143, 59, 169, 242, 68, 22, 143, 49, 11, 105, 137, 181, 117, 229, 98, 43, 107, 247, 236, 145, 11, 130, 135, 126, 27, 81, 39, 88, 85, 56, 141, 116, 96, 16, 41, 51, 218, 122, 228, 75, 90, 84, 198, 63, 254, 157, 53, 146, 139, 91, 170, 45, 175, 124, 10, 144, 173, 47, 181, 65, 49, 197, 81, 206, 219, 237, 55, 205, 159, 231, 42, 197, 155, 80, 198, 19, 40, 137, 113, 7, 222, 157, 90, 213, 84, 222, 35, 1, 1, 37, 172, 46, 170, 140, 28, 17, 86, 131, 141, 57, 216, 29, 11, 0, 116, 200, 72, 167, 163, 30, 39, 201, 22, 76, 236, 245, 151, 247, 56, 57, 57, 112, 145, 125, 113, 176, 242, 60, 219, 98, 170, 242, 188, 67, 223, 160, 156, 35
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp1024 {
    const N: usize = 50;
    const BITLEN: usize = 3189;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00187FFFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000C400000000000
    ];
    const R_VAL: [u64; N] = [
        0x0000000000000A72, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0017000000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFF58D, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00017FFFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x00000000000014E5, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0015800000000000
    ];
    const TR_VAL: [u64; N] = [
        0x0000000000001F58, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0014000000000000
    ];
    const QR_VAL: [u64; N] = [
        0x00000000000029CB, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0012800000000000
    ];
    const R2_VAL: [u64; N] = [
        0x29CBC14E5E77A151, 0x14E5E0A72F053978, 0x0A72F05397829CBC, 0x05397829CBC14E5E, 0x829CBC14E5E0A72F, 0xC14E5E0A72F05397, 0xE0A72F05397829CB, 0xF05397829CBC14E5, 0x7829CBC14E5E0A72, 0xBC14E5E0A72F0539, 0x5E0A72F05397829C, 0x2F05397829CBC14E, 0x97829CBC14E5E0A7, 0xCBC14E5E0A72F053, 0xE5E0A72F05397829, 0x72F05397829CBC14, 0x397829CBC14E5E0A, 0x9CBC14E5E0A72F05, 0x4E5E0A72F0539782, 0xA72F05397829CBC1, 0x5397829CBC14E5E0, 0x29CBC14E5E0A72F0, 0x14E5E0A72F053978, 0x0A72F05397829CBC, 0x05397829CBC14E5E, 0x829CBC14E5E0A72F, 0xC14E5E0A72F05397, 0xE0A72F05397829CB, 0xF05397829CBC14E5, 0x7829CBC14E5E0A72, 0xBC14E5E0A72F0539, 0x5E0A72F05397829C, 0x2F05397829CBC14E, 0x97829CBC14E5E0A7, 0xCBC14E5E0A72F053, 0xE5E0A72F05397829, 0x72F05397829CBC14, 0x397829CBC14E5E0A, 0x9CBC14E5E0A72F05, 0x4E5E0A72F0539782, 0xA72F05397829CBC1, 0x5397829CBC14E5E0, 0x29CBC14E5E0A72F0, 0x14E5E0A72F053978, 0x0A72F05397829CBC, 0x05397829CBC14E5E, 0x829CBC14E5E0A72F, 0xC14E5E0A72F05397, 0xE0A72F05397829CB, 0x001317829CBC14E5
    ];
    const THREE_INV_VAL: [u64; N] = [
        0xAAAAAAAAAAAAAE26, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0xAAAAAAAAAAAAAAAA, 0x0007AAAAAAAAAAAA
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x16BB3D9AE4AC1837, 0x5E5085F0129F3AB5, 0x0B9FAFED0A8DB03A, 0x97564C713C7D1247, 0x7AF9A01D442A780D, 0x72DC9D2831B63922, 0x6EFB0EF25AC26C50, 0x44C3CB1264B777F5, 0x90340C8F4630A8AE, 0x529A9C676917B091, 0x18595A91F595F956, 0x9898941F4A5546AA, 0x1CF52DCE64726510, 0xFC0880F05D9E61C4, 0x7767F191AA626FAE, 0x79B42F6005EB2AD5, 0xFC816200D4CAB8B5, 0x8E67EDAB700C02E5, 0x877160EC89375F2B, 0x5FEC4B62546363AB, 0xDC1A661785AD0E7D, 0xB3248CB71A5FF6E0, 0x13A08FED4DDA93E8, 0xB298BB1D91B58684, 0x93913E51437859B3, 0x19DB632161A7B427, 0x6E6F3D58D217FBC5, 0xC4B479765A553DC0, 0xF776B4931622D651, 0x2D789B6EF7B752A2, 0xC33270E6EE4382EF, 0x21A00B598E602136, 0x85B94FC701D479F3, 0xC7C43D4435BF0E61, 0x6B8F617C410B3E42, 0x3C3B0E40197C21D9, 0xA2A593EB7C29A5E0, 0x743DFF60AF42C735, 0xFBE831E86CF472A3, 0x97027DD18F81CB48, 0x141D57381B73B3D9, 0x0C672AB40B2AC3A4, 0x36650E5E2E1997FC, 0xCACDE06D4034C7BA, 0x08F5EB33BF21520E, 0x3C231A47744D984A, 0x2CD5F3120721FFDB, 0x9745564BEB5CF7D3, 0x68CBEE6D4A3BA6E1, 0x0015234D3FB8006F
    ];
    const TDEC_VAL: [u64; N] = [
        0x14E5E0A72F053978, 0x0A72F05397829CBC, 0x05397829CBC14E5E, 0x829CBC14E5E0A72F, 0xC14E5E0A72F05397, 0xE0A72F05397829CB, 0xF05397829CBC14E5, 0x7829CBC14E5E0A72, 0xBC14E5E0A72F0539, 0x5E0A72F05397829C, 0x2F05397829CBC14E, 0x97829CBC14E5E0A7, 0xCBC14E5E0A72F053, 0xE5E0A72F05397829, 0x72F05397829CBC14, 0x397829CBC14E5E0A, 0x9CBC14E5E0A72F05, 0x4E5E0A72F0539782, 0xA72F05397829CBC1, 0x5397829CBC14E5E0, 0x29CBC14E5E0A72F0, 0x14E5E0A72F053978, 0x0A72F05397829CBC, 0x05397829CBC14E5E, 0x829CBC14E5E0A72F, 0xC14E5E0A72F05397, 0xE0A72F05397829CB, 0xF05397829CBC14E5, 0x7829CBC14E5E0A72, 0xBC14E5E0A72F0539, 0x5E0A72F05397829C, 0x2F05397829CBC14E, 0x97829CBC14E5E0A7, 0xCBC14E5E0A72F053, 0xE5E0A72F05397829, 0x72F05397829CBC14, 0x397829CBC14E5E0A, 0x9CBC14E5E0A72F05, 0x4E5E0A72F0539782, 0xA72F05397829CBC1, 0x5397829CBC14E5E0, 0x29CBC14E5E0A72F0, 0x14E5E0A72F053978, 0x0A72F05397829CBC, 0x05397829CBC14E5E, 0x829CBC14E5E0A72F, 0xC14E5E0A72F05397, 0xE0A72F05397829CB, 0xF05397829CBC14E5, 0x0004000000000A72
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        2, 3
    ];
    const SQRT_EL: usize = 636;
    const FOURTH_ROOT_EH: [u8; 2] = [
        17, 1
    ];
    const FOURTH_ROOT_EL: usize = 636;
    const P1: u64 = 3288334335;
    const P1DIV_M: u64 = 5646962478870764885;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp1024Ext {
    use super::Fp1024::Fp;
    const NQR_RE: Fp = Fp::new([
        0x0DC4FB168B16DCBA, 0x3D733FF930D8A31B, 0xFD6504929A6141A8, 0x15C5510902A970A5, 0x9EC0D8E3E90AE1E3, 0xE5718966B9CAF029, 0x63C5B51A4C5CE774, 0xB95E41F33DF88E39, 0xCB2874DEA6DE65C8, 0xDB6147A51BED5625, 0x3B72FE05730FEF90, 0xF29F3E4C3B98F0A4, 0x7DE8B72BD7AEC82A, 0x41AFC2713AD6DAA2, 0x9D97F08240C57625, 0x69B2DFD813F5066A, 0x0D46DC323309052B, 0xAF4B65CCBFC099E3, 0x4F7B7DFBFF2528F1, 0x46D8954A2A8B5E11, 0xC1CCCBD5E04B4F4F, 0xCD9F749986A7F09E, 0x9763586DD2518D3D, 0x410538454AD2081A, 0x80EC7FFBB3FD121D, 0xDDDDACB4E98D4982, 0xA00B1ADDDF7EB059, 0xCDF721BEC1B1A968, 0xB2D5576538F9827A, 0xFCDA050C11C2FDCF, 0x3812CE3747FC55E2, 0x882CC5B9B7660B08, 0x9A8BFB51CC883FBA, 0xF61F0DDB53A6FF91, 0x528643EF41892229, 0xFD728CEA89941170, 0xF8A6C8804416DDB1, 0xB99F73271A95107C, 0x4CAB23D2CB2E8E55, 0x7BF1457F78113882, 0xCB32EF9E6D10A354, 0x45BC384C4B935CDA, 0x7D89A1B94A068C1A, 0x2E449F881902FDF8, 0x084A4D51379FF049, 0x408401AFEC997EC0, 0x012005A28279881D, 0x50923296678C86FC, 0x440CC180442F1112, 0x0017CA76146102D7
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 3058;
    const P1_DIV_N: [u8; 383] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 3
    ];

    const P1_DIV_C_BITLEN: usize = 3065;
    const P1_DIV_C: [u8; 384] = [
        153, 25, 219, 183, 92, 168, 192, 170, 136, 245, 136, 234, 214, 200, 185, 253, 252, 185, 219, 198, 31, 140, 124, 54, 227, 219, 93, 25, 76, 137, 217, 220, 142, 3, 40, 84, 255, 204, 77, 159, 105, 64, 89, 175, 96, 141, 194, 229, 128, 201, 254, 226, 88, 140, 157, 11, 236, 249, 114, 222, 111, 38, 122, 243, 75, 68, 83, 223, 223, 16, 137, 211, 63, 17, 210, 45, 127, 36, 13, 62, 97, 142, 232, 16, 143, 129, 160, 90, 79, 64, 232, 36, 48, 217, 174, 185, 34, 17, 221, 148, 66, 88, 60, 42, 222, 66, 121, 61, 97, 100, 190, 103, 126, 190, 14, 56, 33, 49, 54, 227, 247, 244, 86, 44, 77, 231, 66, 95, 221, 199, 70, 60, 171, 126, 238, 36, 63, 48, 58, 200, 115, 156, 131, 81, 69, 72, 20, 4, 85, 1, 15, 105, 152, 251, 52, 235, 187, 33, 125, 171, 208, 12, 224, 147, 153, 117, 174, 88, 138, 20, 64, 76, 223, 224, 77, 244, 52, 151, 241, 13, 155, 67, 249, 182, 236, 82, 121, 119, 249, 44, 110, 21, 156, 158, 77, 39, 66, 52, 180, 228, 26, 210, 201, 81, 43, 135, 198, 71, 163, 253, 117, 202, 21, 151, 146, 103, 85, 249, 123, 58, 253, 157, 222, 192, 141, 210, 127, 129, 10, 117, 237, 247, 103, 184, 45, 96, 0, 166, 9, 18, 235, 27, 173, 172, 235, 199, 178, 224, 186, 121, 47, 38, 50, 43, 31, 13, 158, 118, 217, 208, 222, 163, 147, 26, 32, 216, 19, 214, 183, 84, 62, 253, 78, 155, 188, 76, 32, 146, 56, 250, 72, 187, 140, 54, 160, 202, 159, 192, 10, 231, 31, 187, 68, 39, 197, 226, 31, 179, 222, 130, 28, 21, 121, 120, 103, 213, 143, 155, 143, 191, 248, 5, 86, 62, 20, 39, 13, 191, 236, 252, 239, 63, 107, 203, 96, 46, 2, 21, 39, 227, 101, 213, 48, 191, 38, 159, 27, 159, 17, 109, 48, 198, 219, 229, 112, 168, 206, 153, 135, 117, 134, 255, 168, 84, 213, 96, 37, 64, 200, 114, 205, 243, 219, 113, 10, 43, 138, 6, 212, 53, 48, 94, 133, 34, 8, 27, 252, 151, 62, 222, 100, 161, 251, 1
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp1536 {
    const N: usize = 74;
    const BITLEN: usize = 4732;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x083FFFFFFFFFFFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0420000000000000
    ];
    const R_VAL: [u64; N] = [
        0x000000000000001F, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0040000000000000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFFFFFFFFFE0, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x07FFFFFFFFFFFFFF
    ];
    const DR_VAL: [u64; N] = [
        0x000000000000003E, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0080000000000000
    ];
    const TR_VAL: [u64; N] = [
        0x000000000000005D, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00C0000000000000
    ];
    const QR_VAL: [u64; N] = [
        0x000000000000007C, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0100000000000000
    ];
    const R2_VAL: [u64; N] = [
        0x1F07C1F07C1F0B84, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x06C1F07C1F07C1F0
    ];
    const THREE_INV_VAL: [u64; N] = [
        0x555555555555555F, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x0595555555555555
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x4BBD1DF04C989DCB, 0x80B32F9FE3BA0B74, 0x59695652DFBCA495, 0x149DA843FDAA1189, 0x26FAD319D834BA71, 0xA103DC7743333DA2, 0x2612E42BF0681DD1, 0x8DD74BF74EB8E387, 0x6F577BA116C2BCC9, 0x047EB6D5A85D30B1, 0xD6CDEA044288C229, 0x83499BA0F8B2C5F6, 0xB6A9AB5B8F30E742, 0xDA23602CE8333B96, 0x38EAD9A012EB93A2, 0xBB890948328C850A, 0x1EAC9366AC10196A, 0xB6314F3501AC8DEE, 0x6E78F1B050CF5318, 0xE976042CA68C9AEC, 0xA8061908419809DB, 0xAA8BAA34215DE8FD, 0xD4C0B4FEF0473C5B, 0xC4BEFF52C12D5B16, 0x1620367B2AA9C13D, 0x9C4519446FAB509E, 0x26E6E009589C34AF, 0x1257DCB95B00F28B, 0xDCF58914394D5391, 0xBEE9708B9F430696, 0x984609FCBCC65950, 0x93BE34E651CAFC80, 0x6EF6C66441D9B07C, 0xB71C8EF4B92F3C87, 0xE3D1B25E04586AF7, 0x9C08EB3128E923F3, 0xF111A8CB0CEA4070, 0xEA9D71FFA4D1762F, 0x533410F440D315F9, 0x84D8FBF259E9EE60, 0xA78DBCE1B413B087, 0x3EE13BB789FA007F, 0x854BDF8B83E843A5, 0xB13C0F12D038DFE8, 0xA1FF4D489FF790D0, 0xBAD47F0E5E45FF0B, 0x7D2CEDABC8FA3CAD, 0x3F020F07DF1E18DC, 0xD134895067609A53, 0x3B44A660D6815248, 0xD5DD31B727800F80, 0xABF4BEA7C9EAF4FA, 0x17C00074B672F5D5, 0xB31D7FAD064A453A, 0x50A9073AFD8732C8, 0xF8A7D4DC0FC1E1E5, 0xCB38AEAB8CCC2966, 0x0F85B3D209E6DA90, 0x56F6F228ACF5E09D, 0xE22C6FD715093250, 0x2334687D170B763A, 0xDAF8BDB7119DD9F2, 0x2653291FD979C70D, 0xBCC0E0C35B636C7C, 0xEFCEE0351D0750DF, 0x5582EC9A3D5CCC80, 0xDB34EBCA5860069C, 0x5C28605E252BBB4C, 0xE47B4B7D1192E8D7, 0x7990585515818E76, 0x8F93613382B5E4B7, 0xCBED38E56112AF65, 0xB105598CECFCB74D, 0x03663255CF8455AE
    ];
    const TDEC_VAL: [u64; N] = [
        0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0xF07C1F07C1F07C1F, 0x1F07C1F07C1F07C1, 0xC1F07C1F07C1F07C, 0x7C1F07C1F07C1F07, 0x07C1F07C1F07C1F0, 0x010000000000001F
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 2] = [
        16, 16
    ];
    const SQRT_EL: usize = 944;
    const FOURTH_ROOT_EH: [u8; 2] = [
        8, 8
    ];
    const FOURTH_ROOT_EL: usize = 944;
    const P1: u64 = 2214592511;
    const P1DIV_M: u64 = 17328759600548262035;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp1536Ext {
    use super::Fp1536::Fp;
    const NQR_RE: Fp = Fp::new([
        0x868589D3C0850D06, 0x5737A8AFEA63F48B, 0x014B70A1318E88B5, 0xCA735201CD03AED9, 0x0AB45303D7CB03EB, 0x009C604782AABF6F, 0x65E3EB02660A716C, 0x2C07BFB489558CA1, 0x8A52403EF2382D2D, 0x34E133B61F6488E6, 0x0E26C3A0DFDB10C4, 0xD70DAF1ED01CC6F6, 0x51DE87A9501C8279, 0xC3BC8E2DDC03F9DB, 0x77A8546F3F9CBEA8, 0x2AA38803C3A77DE9, 0x7F78F4556808ACCD, 0x78912686665C7118, 0x4EE95C5B24D3B5ED, 0xF35EB5746ED67B19, 0x1B20815B3B934EB1, 0x3D0DF117F7EC0E0E, 0x246656A72CB03238, 0xB088F799FD590AD2, 0xE07B3BA2B794E9CB, 0x23DB6B207D2910FB, 0xEA26A757C6BF3FF9, 0x2012851944D26425, 0xDA54B8F6098EBA23, 0x69345068D3FE1021, 0x9307A5D02B360BDF, 0x135544327A275AF6, 0x493B821E3F3B4294, 0xBC1F15075B6CD6AB, 0x07239950D0649EC9, 0xC376EE2A18239303, 0x6CC586C7833C4865, 0x8247082B28A88C8A, 0x12D748B0C1C7F7B6, 0x50821A3F5232173A, 0x697B363DBD70621F, 0x5410BD5EF2757663, 0x6846119E7280AE9A, 0x78EFE66C8A44041E, 0x05A8C8CAAE8BF54C, 0x9DDF07E6334DE2EB, 0xA506DC82B4F5FA5B, 0xCC3B7FAB28692884, 0x8AB7FC50642302DB, 0xF02408BF47A4F303, 0x42F6BD4390EB06F8, 0x31ABCF27C7072281, 0xC188CD991605E326, 0x44F2D6DF728AE76A, 0x2FF2D84A1BF96E50, 0x7E9DBC5EBBE1EBF3, 0x7DB48DB2CD8DFC31, 0x66AD35D897D2EF56, 0x58E8E3F41DDB4E7C, 0xEB0F12D13DA7A5B5, 0x9ED3D31998A64FF8, 0xD6F7E1F1C36050D9, 0x14A47F425D3772EC, 0x679E92EAE953829A, 0x236F13B66712C3FF, 0x9C49A78E3B695FF0, 0xC0D00FAD7F442B3F, 0x1640464AB2CD3C97, 0xF0C69642F5D6784D, 0xECE020B5A9A6D3F8, 0x44AA88CDA5809008, 0x2D8827AE06E5906F, 0x42769C86BB352926, 0x03B424C5A68DA33D
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 4601;
    const P1_DIV_N: [u8; 576] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1
    ];

    const P1_DIV_C_BITLEN: usize = 4608;
    const P1_DIV_C: [u8; 576] = [
        9, 60, 18, 164, 84, 243, 161, 206, 64, 150, 197, 83, 0, 81, 187, 25, 177, 45, 175, 195, 108, 250, 13, 63, 31, 240, 107, 212, 202, 128, 63, 55, 169, 144, 104, 243, 162, 46, 13, 205, 52, 143, 69, 158, 84, 0, 32, 4, 39, 31, 87, 95, 201, 98, 118, 250, 215, 103, 67, 33, 26, 96, 54, 199, 239, 109, 165, 73, 14, 53, 134, 161, 180, 120, 122, 211, 13, 228, 81, 13, 99, 39, 156, 127, 28, 219, 239, 3, 123, 57, 211, 250, 114, 205, 92, 8, 3, 127, 87, 185, 176, 61, 13, 173, 186, 24, 246, 204, 13, 30, 83, 129, 125, 179, 86, 114, 44, 78, 131, 115, 98, 14, 13, 146, 14, 64, 107, 57, 117, 236, 226, 44, 95, 58, 146, 73, 221, 212, 46, 114, 231, 197, 26, 58, 131, 240, 237, 7, 106, 216, 83, 191, 108, 213, 47, 75, 28, 120, 245, 210, 119, 113, 193, 59, 68, 93, 163, 98, 178, 158, 93, 34, 13, 72, 66, 23, 139, 222, 33, 241, 93, 144, 14, 166, 18, 177, 60, 118, 123, 97, 34, 51, 38, 122, 63, 3, 41, 146, 30, 117, 219, 53, 25, 255, 125, 98, 143, 190, 22, 234, 80, 58, 38, 21, 68, 26, 94, 131, 3, 76, 212, 111, 132, 172, 11, 35, 116, 222, 98, 2, 150, 23, 192, 202, 128, 168, 189, 71, 63, 94, 77, 192, 88, 75, 3, 218, 2, 87, 223, 76, 157, 59, 187, 178, 216, 22, 189, 145, 187, 218, 171, 221, 44, 221, 120, 102, 89, 73, 70, 53, 208, 129, 23, 64, 241, 255, 70, 155, 252, 168, 231, 193, 0, 120, 106, 102, 172, 228, 140, 66, 238, 178, 86, 90, 207, 124, 113, 252, 207, 121, 143, 121, 49, 124, 24, 241, 105, 15, 58, 233, 94, 172, 68, 125, 82, 123, 132, 96, 182, 61, 24, 192, 77, 81, 195, 36, 147, 179, 239, 36, 37, 9, 70, 185, 18, 120, 202, 33, 66, 226, 24, 214, 253, 247, 118, 252, 183, 119, 50, 3, 108, 60, 162, 148, 103, 109, 99, 195, 159, 32, 129, 114, 205, 26, 117, 174, 109, 240, 97, 135, 53, 136, 12, 60, 208, 57, 192, 173, 103, 158, 37, 157, 72, 76, 195, 10, 103, 253, 216, 58, 195, 248, 238, 238, 109, 253, 165, 27, 129, 163, 209, 62, 93, 217, 211, 239, 191, 46, 100, 78, 243, 255, 84, 98, 220, 95, 156, 21, 110, 40, 33, 215, 130, 197, 101, 160, 132, 41, 27, 209, 251, 159, 123, 191, 168, 136, 55, 134, 25, 81, 44, 243, 74, 209, 174, 186, 53, 248, 249, 0, 53, 26, 65, 208, 104, 112, 113, 188, 106, 163, 189, 197, 80, 133, 137, 13, 0, 168, 114, 47, 2, 181, 94, 194, 125, 26, 175, 210, 23, 200, 132, 152, 247, 143, 52, 36, 209, 29, 152, 65, 175, 137, 101, 179, 218, 228, 152, 110, 236, 24, 34, 171, 184, 117, 12, 217, 203, 87, 52, 127, 184, 79, 30, 146, 243, 43, 84, 189, 41, 92, 25, 0, 100, 94, 223, 107, 158, 177, 160, 121, 202, 60, 188, 235, 105, 118, 218, 173, 218, 40, 2, 205, 44, 194, 195, 239, 119, 249, 238, 43, 58, 109, 161, 207, 63, 113, 17, 121, 223, 77, 237, 141, 237, 78, 243, 138, 79, 167, 254, 191, 87, 120, 252, 208, 239, 170
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}

pub mod Fp2048 {
    const N: usize = 98;
    const BITLEN: usize = 6235;
    const MODULUS: [u64; N] = [
        0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x0000000007D9FFFF
    ];
    const HALF_MODULUS: [u64; N] = [
        0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003ED0000
    ];
    const R_VAL: [u64; N] = [
        0x000000209ADFA656, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000C40000
    ];
    const MINUS_R_VAL: [u64; N] = [
        0xFFFFFFDF652059A9, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x000000000715FFFF
    ];
    const DR_VAL: [u64; N] = [
        0x0000004135BF4CAC, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000001880000
    ];
    const TR_VAL: [u64; N] = [
        0x00000061D09EF302, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000024C0000
    ];
    const QR_VAL: [u64; N] = [
        0x000000826B7E9958, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000003100000
    ];
    const R2_VAL: [u64; N] = [
        0xA504A0BEA872876E, 0x70D80209ADFA6988, 0xF6933B59EB1CC8B9, 0x0D80209ADFA65618, 0x6933B59EB1CC8B97, 0xD80209ADFA65618F, 0x933B59EB1CC8B970, 0x80209ADFA65618F6, 0x33B59EB1CC8B970D, 0x0209ADFA65618F69, 0x3B59EB1CC8B970D8, 0x209ADFA65618F693, 0xB59EB1CC8B970D80, 0x09ADFA65618F6933, 0x59EB1CC8B970D802, 0x9ADFA65618F6933B, 0x9EB1CC8B970D8020, 0xADFA65618F6933B5, 0xEB1CC8B970D80209, 0xDFA65618F6933B59, 0xB1CC8B970D80209A, 0xFA65618F6933B59E, 0x1CC8B970D80209AD, 0xA65618F6933B59EB, 0xCC8B970D80209ADF, 0x65618F6933B59EB1, 0xC8B970D80209ADFA, 0x5618F6933B59EB1C, 0x8B970D80209ADFA6, 0x618F6933B59EB1CC, 0xB970D80209ADFA65, 0x18F6933B59EB1CC8, 0x970D80209ADFA656, 0x8F6933B59EB1CC8B, 0x70D80209ADFA6561, 0xF6933B59EB1CC8B9, 0x0D80209ADFA65618, 0x6933B59EB1CC8B97, 0xD80209ADFA65618F, 0x933B59EB1CC8B970, 0x80209ADFA65618F6, 0x33B59EB1CC8B970D, 0x0209ADFA65618F69, 0x3B59EB1CC8B970D8, 0x209ADFA65618F693, 0xB59EB1CC8B970D80, 0x09ADFA65618F6933, 0x59EB1CC8B970D802, 0x9ADFA65618F6933B, 0x9EB1CC8B970D8020, 0xADFA65618F6933B5, 0xEB1CC8B970D80209, 0xDFA65618F6933B59, 0xB1CC8B970D80209A, 0xFA65618F6933B59E, 0x1CC8B970D80209AD, 0xA65618F6933B59EB, 0xCC8B970D80209ADF, 0x65618F6933B59EB1, 0xC8B970D80209ADFA, 0x5618F6933B59EB1C, 0x8B970D80209ADFA6, 0x618F6933B59EB1CC, 0xB970D80209ADFA65, 0x18F6933B59EB1CC8, 0x970D80209ADFA656, 0x8F6933B59EB1CC8B, 0x70D80209ADFA6561, 0xF6933B59EB1CC8B9, 0x0D80209ADFA65618, 0x6933B59EB1CC8B97, 0xD80209ADFA65618F, 0x933B59EB1CC8B970, 0x80209ADFA65618F6, 0x33B59EB1CC8B970D, 0x0209ADFA65618F69, 0x3B59EB1CC8B970D8, 0x209ADFA65618F693, 0xB59EB1CC8B970D80, 0x09ADFA65618F6933, 0x59EB1CC8B970D802, 0x9ADFA65618F6933B, 0x9EB1CC8B970D8020, 0xADFA65618F6933B5, 0xEB1CC8B970D80209, 0xDFA65618F6933B59, 0xB1CC8B970D80209A, 0xFA65618F6933B59E, 0x1CC8B970D80209AD, 0xA65618F6933B59EB, 0xCC8B970D80209ADF, 0x65618F6933B59EB1, 0xC8B970D80209ADFA, 0x5618F6933B59EB1C, 0x8B970D80209ADFA6, 0x618F6933B59EB1CC, 0xB970D80209ADFA65, 0x00000000043F1CC8
    ];
    const THREE_INV_VAL: [u64; N] = [
        0x55555560339FE21C, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x5555555555555555, 0x00000000057D5555
    ];
    const P0I: u64 = 1;
    const TFIXDIV_VAL: [u64; N] = [
        0x68721649C0FF4005, 0xC5BAFD19BF838379, 0x3E9D8CAB829531F0, 0xCFD4DD3DA71F3895, 0x87F33E0D85D8204A, 0x5194BB628C9858F6, 0x4D9CB7DD561C2692, 0x008D5B13C2332706, 0x009AC5D882BE55C8, 0xE1281FE9455FE199, 0xBD3A24FCDCCFF250, 0x4B807FCB02B6A3CD, 0x9DCFFBD5A753A8C5, 0x8AC2DF14DF2A68DF, 0x7E90AE071B5FEB9A, 0xED483E3690EF60CD, 0x68F1DD058FCBF537, 0x7A68E3EF2D43E49D, 0xAB5B2A04A445DDD5, 0x48E155D9B0B3D885, 0x566141E567F398EB, 0xF377B4584C1798BE, 0x3E8EA6136B66AA82, 0x90AF3650672CE93D, 0x4999BDB0A6528E59, 0xCF1AC13A4F29DB2E, 0x34FFAD5C3509DC7E, 0x42A6CE7ACAA94658, 0x0D18A60D64D67A4C, 0x22680E8B50BF7996, 0x11721848F3870AEA, 0x2B2AEEB1C5C6A81D, 0xF64828CFC3AB1410, 0x4CC8CC0D6B38469B, 0x619FA2678297C8CB, 0x65C2E23EBE2E46DB, 0x96F89355EBE817C3, 0x69115FDE6A5B4656, 0xF24165CF256B156F, 0xF75C142CEAB25D7B, 0x7CAF8D3CC8596F7E, 0x5B48190FD40C3992, 0x25EE6CB3D100CFEF, 0x1F4612DD5F97C110, 0x24699DB4D52F768C, 0xC61B28B0ED9F3AB5, 0x015B42FA8D6E5BA9, 0xD470064E8A30F950, 0xEB0EAD8B034C812B, 0xE4B4F1EA878FA1F1, 0x9AD2E7BB4AADFCD9, 0x44657F34CBADBF9E, 0x8FB27AEB00D681BF, 0xB49702F291431811, 0x63988A64E6548375, 0xFAF197912D74C62B, 0xC3A4E6938C21068F, 0xA036E03F9896DD20, 0x0CFABD04B0C2CE27, 0xA5B281786F780CF5, 0x08F604A209AA52C6, 0x86509AA26E4DC1E1, 0x0C53091197EE0E0D, 0x859C8EAFB43F8745, 0x1954183BAA8CC89B, 0x43A2609E63730AA7, 0x26F37702D567DEF1, 0xE270357AC31A40BF, 0x81EEB7073E00D310, 0x56D3271E34407F50, 0xC3E10384351477B9, 0x1D00CB97AE001338, 0x257BC0666F4C5453, 0xFA087E0582919B8E, 0x4F99FA75AE19B1B7, 0x11A6BD428308887A, 0x89D60614074FEE95, 0x4282E6D0DDFA78BC, 0xC63829ABD72CC5D5, 0x0C33D7C99F1616C2, 0x481CEF0403B4D868, 0x2CD82B646D41B3E1, 0x3D510DB02A8064D5, 0xFB6DD3D6E1993A88, 0xAB00426FA5E703FB, 0xD99224F3E90B8216, 0xEBD3A4AAE7A8C07B, 0x04A1AFEB01B6E009, 0x47C293C1C0E57614, 0x051F8E6EC36C41B0, 0xFDB4ADFBA1046FEB, 0x332A325037CD9DF9, 0x847008660C7A7D9C, 0x543CD2DB9FC92CC5, 0xE033BC4DA1090C84, 0x45B784BD50F97B8B, 0x0479D67909383488, 0x0000000005DE7988
    ];
    const TDEC_VAL: [u64; N] = [
        0x70D80209ADFA6988, 0xF6933B59EB1CC8B9, 0x0D80209ADFA65618, 0x6933B59EB1CC8B97, 0xD80209ADFA65618F, 0x933B59EB1CC8B970, 0x80209ADFA65618F6, 0x33B59EB1CC8B970D, 0x0209ADFA65618F69, 0x3B59EB1CC8B970D8, 0x209ADFA65618F693, 0xB59EB1CC8B970D80, 0x09ADFA65618F6933, 0x59EB1CC8B970D802, 0x9ADFA65618F6933B, 0x9EB1CC8B970D8020, 0xADFA65618F6933B5, 0xEB1CC8B970D80209, 0xDFA65618F6933B59, 0xB1CC8B970D80209A, 0xFA65618F6933B59E, 0x1CC8B970D80209AD, 0xA65618F6933B59EB, 0xCC8B970D80209ADF, 0x65618F6933B59EB1, 0xC8B970D80209ADFA, 0x5618F6933B59EB1C, 0x8B970D80209ADFA6, 0x618F6933B59EB1CC, 0xB970D80209ADFA65, 0x18F6933B59EB1CC8, 0x970D80209ADFA656, 0x8F6933B59EB1CC8B, 0x70D80209ADFA6561, 0xF6933B59EB1CC8B9, 0x0D80209ADFA65618, 0x6933B59EB1CC8B97, 0xD80209ADFA65618F, 0x933B59EB1CC8B970, 0x80209ADFA65618F6, 0x33B59EB1CC8B970D, 0x0209ADFA65618F69, 0x3B59EB1CC8B970D8, 0x209ADFA65618F693, 0xB59EB1CC8B970D80, 0x09ADFA65618F6933, 0x59EB1CC8B970D802, 0x9ADFA65618F6933B, 0x9EB1CC8B970D8020, 0xADFA65618F6933B5, 0xEB1CC8B970D80209, 0xDFA65618F6933B59, 0xB1CC8B970D80209A, 0xFA65618F6933B59E, 0x1CC8B970D80209AD, 0xA65618F6933B59EB, 0xCC8B970D80209ADF, 0x65618F6933B59EB1, 0xC8B970D80209ADFA, 0x5618F6933B59EB1C, 0x8B970D80209ADFA6, 0x618F6933B59EB1CC, 0xB970D80209ADFA65, 0x18F6933B59EB1CC8, 0x970D80209ADFA656, 0x8F6933B59EB1CC8B, 0x70D80209ADFA6561, 0xF6933B59EB1CC8B9, 0x0D80209ADFA65618, 0x6933B59EB1CC8B97, 0xD80209ADFA65618F, 0x933B59EB1CC8B970, 0x80209ADFA65618F6, 0x33B59EB1CC8B970D, 0x0209ADFA65618F69, 0x3B59EB1CC8B970D8, 0x209ADFA65618F693, 0xB59EB1CC8B970D80, 0x09ADFA65618F6933, 0x59EB1CC8B970D802, 0x9ADFA65618F6933B, 0x9EB1CC8B970D8020, 0xADFA65618F6933B5, 0xEB1CC8B970D80209, 0xDFA65618F6933B59, 0xB1CC8B970D80209A, 0xFA65618F6933B59E, 0x1CC8B970D80209AD, 0xA65618F6933B59EB, 0xCC8B970D80209ADF, 0x65618F6933B59EB1, 0xC8B970D80209ADFA, 0x5618F6933B59EB1C, 0x8B970D80209ADFA6, 0x618F6933B59EB1CC, 0xB970D80209ADFA65, 0x18F6933B59EB1CC8, 0x00000000050FA656
    ];
    const WIN_LEN: usize = 5;
    const SQRT_EH: [u8; 3] = [
        8, 27, 7
    ];
    const SQRT_EL: usize = 1244;
    const FOURTH_ROOT_EH: [u8; 3] = [
        20, 29, 3
    ];
    const FOURTH_ROOT_EL: usize = 1244;
    const P1: u64 = 4215275519;
    const P1DIV_M: u64 = 348744419782761335;

    crate::finitefield::fp_gen::define_fp_core!{}

    #[cfg(test)]
    mod tests {
        crate::finitefield::fp_gen::define_fp_tests!{}
    }
}

pub mod Fp2048Ext {
    use super::Fp2048::Fp;
    const NQR_RE: Fp = Fp::new([
        0x85CBC998C0B78385, 0x5BAE591D4D8D5399, 0xA34EF8A6D1D8A8C1, 0x10596AFE4E90C51C, 0xA46B2F60DCDB3162, 0x4BBF96FDAECDAB9D, 0xE9A4E300C73FFE0E, 0xC4DD670C826B17C6, 0x1A404DA7556EF00D, 0xDFE4FD29641B9BE8, 0x055F5A4E5D9A7CCA, 0xA37FBF04907C6229, 0xDDFD2BF7C88664D8, 0x9F6F684DDD0D0389, 0xED9FBEFEBEE80418, 0xD06A8F363DF00F04, 0xFAB395FEDBAA1B64, 0x80DB0AB5A2823738, 0x88BC66E482589079, 0xAC298A4414C99E5F, 0x40C9423807BAC00E, 0xF1751ECC5A82AB6E, 0x91451C54E45E9F88, 0xCB3472DC225007EC, 0x1C0AF5F04C549253, 0xFECE99F3228E24BA, 0xF63C64E6D72B6812, 0xB1976EB36C9D25F2, 0xCAB93731AA1A566E, 0x6B8B7EE4A43D9165, 0xB639539893AADC1D, 0xE5F5D6167382E30E, 0x8DC2713D56A02EF2, 0x3169223566DBE03A, 0xE95DFB87C24E6D39, 0xF4D2E97DC0359966, 0x752DFE94A39B566E, 0x11864C2D3592DAC3, 0xAA24CA7349E9CD54, 0x84C52522C22DA67F, 0xDCB06EA4C5B9BECC, 0xA8BC6F74311C2177, 0xEA07B67F7EE07035, 0x988B111F04C273E8, 0x6152A197C9005A27, 0x6D304FFCCF5B6F7B, 0x3CF5F5CD0F0F4BB4, 0xD20F980D0D5E3816, 0x6C6A1A4E92F11CB3, 0x3EC1377FDFCD4C2B, 0x41B0611DFD8FD221, 0x92216C2A66381B80, 0xC1905603EC2D64E8, 0x1E7DAE00EFE30408, 0xBFD7247B66A8E56B, 0xA065F38DA629D655, 0xF5793430FEBDE672, 0x532325B2B48B8EBC, 0x3B87FD554F6DD64B, 0xC94443EFC1B0CB99, 0xA2423209036D8C6F, 0x1D0841E1D07C956E, 0xDD79E304D26628F3, 0xBC5C1EE9C8CD0A0C, 0x8402D099BC743DCA, 0x0282CDBFEBFDCD2B, 0x2F7D94A973962CE3, 0xC85EED3F65745279, 0x086B8F1267762BFE, 0xAB4ECD6035468F67, 0x212CBC3E682CCF4F, 0x2441F61AC16DEBB3, 0xCEC476B2D15E8A2B, 0xC3D2EA826F3B3D7E, 0x737050C082107464, 0xB73B25F9AFBE1D6B, 0x36CE172083999BFD, 0x85AF2BE05960F411, 0x388CE2AB157FD020, 0x70F46640C8598546, 0xA2A1C0E1D2E2CFE3, 0x4FF5FDF83164E7AB, 0x45271F771608C1F5, 0xD46E1B5BDB9E26B9, 0x9001BFF4FB983D1E, 0x5A55B273C8BC3469, 0x48A7BD148D217387, 0x541EC8C39F89C0FB, 0xB11AAF7DDBEA5FE3, 0x85B62774E15F5982, 0x48923EA35CA41096, 0xE910FCEF4C77D164, 0x9983A8B32885A5B1, 0x427F69BF46F96123, 0x99AAB3334B367FD9, 0x94D9C09BA07D6FA6, 0xD42E6E530F12E239, 0x000000000155FBB1
    ]);

    const P1_N_BITLEN: usize = 132;
    const P1_N: [u8; 17] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8
    ];
    const P1_B: usize = 131;

    const P1_C_BITLEN: usize = 124;
    const P1_C: [u8; 16] = [
        121, 80, 127, 216, 41, 152, 253, 148, 191, 188, 2, 243, 111, 254, 90, 12
    ];
    const P1_C_EXP: usize = 78;
    const P1_F: u64 = 1;

    const P1_DIV_N_BITLEN: usize = 6104;
    const P1_DIV_N: [u8; 763] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 251
    ];

    const P1_DIV_C_BITLEN: usize = 6112;
    const P1_DIV_C: [u8; 764] = [
        245, 142, 73, 118, 222, 176, 247, 147, 174, 14, 93, 71, 255, 167, 34, 5, 69, 6, 2, 235, 2, 8, 244, 187, 217, 216, 208, 94, 90, 110, 63, 34, 48, 84, 129, 221, 144, 14, 75, 252, 135, 111, 117, 183, 99, 212, 202, 33, 239, 138, 179, 50, 150, 104, 136, 106, 147, 209, 13, 144, 207, 24, 255, 255, 171, 52, 200, 227, 56, 110, 38, 125, 75, 10, 78, 8, 231, 137, 86, 54, 2, 56, 230, 165, 125, 125, 200, 159, 240, 33, 220, 200, 14, 147, 166, 207, 146, 168, 68, 1, 159, 196, 82, 103, 94, 194, 110, 94, 30, 99, 93, 123, 177, 181, 102, 103, 6, 206, 164, 108, 236, 115, 81, 93, 191, 4, 53, 119, 215, 75, 221, 55, 170, 251, 153, 143, 227, 104, 96, 133, 199, 143, 254, 195, 135, 253, 30, 153, 126, 194, 33, 77, 49, 20, 192, 205, 178, 229, 250, 121, 140, 159, 74, 157, 30, 61, 146, 18, 28, 206, 154, 154, 182, 60, 222, 141, 2, 97, 104, 117, 52, 117, 246, 10, 222, 216, 44, 206, 221, 113, 14, 95, 78, 56, 167, 196, 138, 197, 92, 219, 22, 69, 218, 116, 147, 160, 129, 177, 177, 170, 25, 49, 111, 255, 157, 171, 76, 251, 194, 150, 79, 85, 97, 160, 121, 209, 107, 250, 50, 51, 114, 252, 33, 70, 4, 57, 26, 71, 95, 142, 50, 8, 117, 163, 2, 85, 98, 152, 1, 122, 244, 73, 137, 19, 209, 222, 172, 92, 115, 162, 84, 212, 67, 17, 80, 216, 56, 115, 240, 86, 21, 101, 42, 116, 214, 88, 180, 238, 251, 85, 88, 105, 245, 63, 15, 139, 146, 234, 88, 14, 38, 6, 230, 123, 225, 80, 247, 72, 113, 183, 70, 108, 69, 30, 32, 107, 6, 155, 176, 85, 255, 58, 130, 227, 211, 120, 242, 83, 44, 148, 234, 251, 120, 223, 9, 76, 101, 45, 135, 6, 216, 157, 229, 44, 163, 116, 83, 250, 161, 196, 6, 134, 165, 4, 56, 157, 57, 242, 252, 211, 152, 193, 78, 191, 130, 57, 171, 234, 110, 81, 146, 20, 151, 95, 180, 222, 147, 10, 101, 57, 242, 144, 63, 241, 227, 220, 81, 91, 100, 137, 110, 198, 232, 240, 25, 187, 48, 80, 42, 254, 175, 93, 25, 234, 137, 95, 14, 118, 174, 97, 172, 226, 45, 3, 99, 41, 41, 174, 109, 10, 94, 214, 43, 135, 158, 70, 232, 125, 207, 138, 175, 169, 23, 81, 210, 10, 178, 161, 73, 142, 41, 81, 77, 229, 20, 2, 134, 133, 211, 141, 118, 222, 73, 12, 249, 153, 159, 25, 154, 62, 33, 30, 64, 114, 113, 65, 63, 225, 22, 2, 162, 176, 218, 122, 222, 80, 211, 120, 68, 161, 99, 60, 120, 65, 254, 45, 179, 99, 190, 107, 133, 156, 60, 48, 134, 31, 168, 116, 83, 231, 212, 193, 208, 1, 55, 205, 13, 107, 151, 114, 102, 129, 70, 184, 9, 6, 71, 41, 116, 138, 96, 133, 229, 125, 21, 125, 248, 112, 40, 74, 246, 139, 186, 83, 180, 30, 201, 104, 240, 77, 50, 150, 69, 72, 193, 7, 104, 87, 245, 218, 139, 194, 100, 183, 243, 81, 175, 18, 133, 227, 199, 184, 54, 168, 255, 6, 123, 148, 254, 213, 14, 92, 168, 194, 68, 32, 100, 42, 96, 27, 37, 175, 15, 40, 135, 37, 234, 18, 145, 226, 100, 43, 95, 179, 126, 60, 39, 178, 177, 166, 35, 158, 225, 7, 219, 64, 178, 95, 197, 205, 195, 119, 82, 24, 52, 80, 215, 2, 73, 203, 155, 79, 50, 103, 224, 147, 234, 97, 112, 74, 153, 106, 38, 55, 25, 28, 70, 138, 86, 154, 70, 212, 7, 174, 33, 183, 51, 160, 124, 175, 166, 215, 64, 106, 157, 218, 180, 29, 72, 153, 61, 155, 179, 82, 87, 193, 16, 160, 184, 173, 88, 245, 30, 212, 176, 218, 16, 234, 108, 0, 120, 122, 163, 196, 119, 57, 202, 202, 78, 162, 24, 175, 158, 223, 181, 26, 254, 254, 198, 5, 79, 103, 98, 140, 72, 92, 248, 219, 222, 123, 248, 229, 188, 236, 93, 22, 252, 150, 233, 229, 119, 125, 239, 173, 33, 6, 30, 248, 55, 14, 206, 89, 131, 70, 140, 146, 225, 246, 236, 232, 17, 8, 187, 106, 177, 180, 114, 69, 34, 138, 84, 70, 83, 130, 219, 150, 191, 29, 65, 137, 99, 26, 38, 63, 82, 44, 208, 107, 182, 140, 135, 106, 174, 162
    ];

    crate::finitefield::fp2_gen::define_fp2_core! {}
    #[cfg(test)]
    mod tests {
        crate::finitefield::fp2_gen::define_fp2_tests! {}
    }
}
